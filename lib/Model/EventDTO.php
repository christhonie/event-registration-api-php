<?php
/**
 * EventDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Idealogic\RegistrationAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Idealogic Event and Member Admin Service API
 *
 * Adminstrative services for managing events and members
 *
 * The version of the OpenAPI document: 2.0.3
 * Contact: development@idealogic.co.za
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Idealogic\RegistrationAPI\Model;

use \ArrayAccess;
use \Idealogic\RegistrationAPI\ObjectSerializer;

/**
 * EventDTO Class Doc Comment
 *
 * @category Class
 * @description An event is a collection of one or more races (activities) are held on a day or series of days.
 * @package  Idealogic\RegistrationAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EventDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EventDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'venue' => 'string',
        'address' => 'string',
        'city' => 'string',
        'postal_code' => 'string',
        'province' => 'string',
        'country' => 'string',
        'latitude' => 'float',
        'longitude' => 'float',
        'contact_email' => 'string',
        'contact_name' => 'string',
        'contact_url' => 'string',
        'timezone' => 'string',
        'start_date_time' => '\DateTime',
        'end_date_time' => '\DateTime',
        'all_day' => 'bool',
        'ticket_url' => 'string',
        'cost' => 'string',
        'result_time_rounding' => 'int',
        'mobii_race_id' => 'string',
        'calendar_type' => 'string',
        'csa_membership_required' => 'bool',
        'csa_license_required' => 'bool',
        'csa_strict_registration' => 'bool',
        'csa_day_license_disallow' => 'bool',
        'form_id' => 'int',
        'product_mode' => 'string',
        'number_type' => '\Idealogic\RegistrationAPI\Model\NumberTypeDTO',
        'tag_type' => '\Idealogic\RegistrationAPI\Model\TagTypeDTO',
        'series' => '\Idealogic\RegistrationAPI\Model\SeriesDTO',
        'sanctioning_organisation' => '\Idealogic\RegistrationAPI\Model\OrganisationDTO',
        'organiser' => '\Idealogic\RegistrationAPI\Model\OrganisationDTO',
        'product_default' => '\Idealogic\RegistrationAPI\Model\ProductDTO',
        'product_number_add' => '\Idealogic\RegistrationAPI\Model\ProductDTO',
        'product_number_first' => '\Idealogic\RegistrationAPI\Model\ProductDTO',
        'product_tag_add' => '\Idealogic\RegistrationAPI\Model\ProductDTO',
        'product_tag_first' => '\Idealogic\RegistrationAPI\Model\ProductDTO',
        'categories' => '\Idealogic\RegistrationAPI\Model\EventCategoryDTO[]',
        'diciplines' => '\Idealogic\RegistrationAPI\Model\DisciplineDTO[]',
        'race_types' => '\Idealogic\RegistrationAPI\Model\RaceTypeDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'venue' => null,
        'address' => null,
        'city' => null,
        'postal_code' => null,
        'province' => null,
        'country' => null,
        'latitude' => null,
        'longitude' => null,
        'contact_email' => null,
        'contact_name' => null,
        'contact_url' => null,
        'timezone' => null,
        'start_date_time' => 'date-time',
        'end_date_time' => 'date-time',
        'all_day' => null,
        'ticket_url' => null,
        'cost' => null,
        'result_time_rounding' => 'int32',
        'mobii_race_id' => null,
        'calendar_type' => null,
        'csa_membership_required' => null,
        'csa_license_required' => null,
        'csa_strict_registration' => null,
        'csa_day_license_disallow' => null,
        'form_id' => 'int64',
        'product_mode' => null,
        'number_type' => null,
        'tag_type' => null,
        'series' => null,
        'sanctioning_organisation' => null,
        'organiser' => null,
        'product_default' => null,
        'product_number_add' => null,
        'product_number_first' => null,
        'product_tag_add' => null,
        'product_tag_first' => null,
        'categories' => null,
        'diciplines' => null,
        'race_types' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'venue' => false,
        'address' => false,
        'city' => false,
        'postal_code' => false,
        'province' => false,
        'country' => false,
        'latitude' => false,
        'longitude' => false,
        'contact_email' => false,
        'contact_name' => false,
        'contact_url' => false,
        'timezone' => false,
        'start_date_time' => false,
        'end_date_time' => false,
        'all_day' => false,
        'ticket_url' => false,
        'cost' => false,
        'result_time_rounding' => false,
        'mobii_race_id' => false,
        'calendar_type' => false,
        'csa_membership_required' => false,
        'csa_license_required' => false,
        'csa_strict_registration' => false,
        'csa_day_license_disallow' => false,
        'form_id' => false,
        'product_mode' => false,
        'number_type' => false,
        'tag_type' => false,
        'series' => false,
        'sanctioning_organisation' => false,
        'organiser' => false,
        'product_default' => false,
        'product_number_add' => false,
        'product_number_first' => false,
        'product_tag_add' => false,
        'product_tag_first' => false,
        'categories' => false,
        'diciplines' => false,
        'race_types' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'venue' => 'venue',
        'address' => 'address',
        'city' => 'city',
        'postal_code' => 'postalCode',
        'province' => 'province',
        'country' => 'country',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'contact_email' => 'contactEmail',
        'contact_name' => 'contactName',
        'contact_url' => 'contactURL',
        'timezone' => 'timezone',
        'start_date_time' => 'startDateTime',
        'end_date_time' => 'endDateTime',
        'all_day' => 'allDay',
        'ticket_url' => 'ticketURL',
        'cost' => 'cost',
        'result_time_rounding' => 'resultTimeRounding',
        'mobii_race_id' => 'mobiiRaceId',
        'calendar_type' => 'calendarType',
        'csa_membership_required' => 'csaMembershipRequired',
        'csa_license_required' => 'csaLicenseRequired',
        'csa_strict_registration' => 'csaStrictRegistration',
        'csa_day_license_disallow' => 'csaDayLicenseDisallow',
        'form_id' => 'formId',
        'product_mode' => 'productMode',
        'number_type' => 'numberType',
        'tag_type' => 'tagType',
        'series' => 'series',
        'sanctioning_organisation' => 'sanctioningOrganisation',
        'organiser' => 'organiser',
        'product_default' => 'productDefault',
        'product_number_add' => 'productNumberAdd',
        'product_number_first' => 'productNumberFirst',
        'product_tag_add' => 'productTagAdd',
        'product_tag_first' => 'productTagFirst',
        'categories' => 'categories',
        'diciplines' => 'diciplines',
        'race_types' => 'raceTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'venue' => 'setVenue',
        'address' => 'setAddress',
        'city' => 'setCity',
        'postal_code' => 'setPostalCode',
        'province' => 'setProvince',
        'country' => 'setCountry',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'contact_email' => 'setContactEmail',
        'contact_name' => 'setContactName',
        'contact_url' => 'setContactUrl',
        'timezone' => 'setTimezone',
        'start_date_time' => 'setStartDateTime',
        'end_date_time' => 'setEndDateTime',
        'all_day' => 'setAllDay',
        'ticket_url' => 'setTicketUrl',
        'cost' => 'setCost',
        'result_time_rounding' => 'setResultTimeRounding',
        'mobii_race_id' => 'setMobiiRaceId',
        'calendar_type' => 'setCalendarType',
        'csa_membership_required' => 'setCsaMembershipRequired',
        'csa_license_required' => 'setCsaLicenseRequired',
        'csa_strict_registration' => 'setCsaStrictRegistration',
        'csa_day_license_disallow' => 'setCsaDayLicenseDisallow',
        'form_id' => 'setFormId',
        'product_mode' => 'setProductMode',
        'number_type' => 'setNumberType',
        'tag_type' => 'setTagType',
        'series' => 'setSeries',
        'sanctioning_organisation' => 'setSanctioningOrganisation',
        'organiser' => 'setOrganiser',
        'product_default' => 'setProductDefault',
        'product_number_add' => 'setProductNumberAdd',
        'product_number_first' => 'setProductNumberFirst',
        'product_tag_add' => 'setProductTagAdd',
        'product_tag_first' => 'setProductTagFirst',
        'categories' => 'setCategories',
        'diciplines' => 'setDiciplines',
        'race_types' => 'setRaceTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'venue' => 'getVenue',
        'address' => 'getAddress',
        'city' => 'getCity',
        'postal_code' => 'getPostalCode',
        'province' => 'getProvince',
        'country' => 'getCountry',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'contact_email' => 'getContactEmail',
        'contact_name' => 'getContactName',
        'contact_url' => 'getContactUrl',
        'timezone' => 'getTimezone',
        'start_date_time' => 'getStartDateTime',
        'end_date_time' => 'getEndDateTime',
        'all_day' => 'getAllDay',
        'ticket_url' => 'getTicketUrl',
        'cost' => 'getCost',
        'result_time_rounding' => 'getResultTimeRounding',
        'mobii_race_id' => 'getMobiiRaceId',
        'calendar_type' => 'getCalendarType',
        'csa_membership_required' => 'getCsaMembershipRequired',
        'csa_license_required' => 'getCsaLicenseRequired',
        'csa_strict_registration' => 'getCsaStrictRegistration',
        'csa_day_license_disallow' => 'getCsaDayLicenseDisallow',
        'form_id' => 'getFormId',
        'product_mode' => 'getProductMode',
        'number_type' => 'getNumberType',
        'tag_type' => 'getTagType',
        'series' => 'getSeries',
        'sanctioning_organisation' => 'getSanctioningOrganisation',
        'organiser' => 'getOrganiser',
        'product_default' => 'getProductDefault',
        'product_number_add' => 'getProductNumberAdd',
        'product_number_first' => 'getProductNumberFirst',
        'product_tag_add' => 'getProductTagAdd',
        'product_tag_first' => 'getProductTagFirst',
        'categories' => 'getCategories',
        'diciplines' => 'getDiciplines',
        'race_types' => 'getRaceTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PRODUCT_MODE_CATEGORY_ELSE_EVENT = 'CATEGORY_ELSE_EVENT';
    public const PRODUCT_MODE_BOTH = 'BOTH';
    public const PRODUCT_MODE_EVENT_ONLY = 'EVENT_ONLY';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductModeAllowableValues()
    {
        return [
            self::PRODUCT_MODE_CATEGORY_ELSE_EVENT,
            self::PRODUCT_MODE_BOTH,
            self::PRODUCT_MODE_EVENT_ONLY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('venue', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('province', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('latitude', $data ?? [], null);
        $this->setIfExists('longitude', $data ?? [], null);
        $this->setIfExists('contact_email', $data ?? [], null);
        $this->setIfExists('contact_name', $data ?? [], null);
        $this->setIfExists('contact_url', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('start_date_time', $data ?? [], null);
        $this->setIfExists('end_date_time', $data ?? [], null);
        $this->setIfExists('all_day', $data ?? [], null);
        $this->setIfExists('ticket_url', $data ?? [], null);
        $this->setIfExists('cost', $data ?? [], null);
        $this->setIfExists('result_time_rounding', $data ?? [], null);
        $this->setIfExists('mobii_race_id', $data ?? [], null);
        $this->setIfExists('calendar_type', $data ?? [], null);
        $this->setIfExists('csa_membership_required', $data ?? [], null);
        $this->setIfExists('csa_license_required', $data ?? [], null);
        $this->setIfExists('csa_strict_registration', $data ?? [], null);
        $this->setIfExists('csa_day_license_disallow', $data ?? [], null);
        $this->setIfExists('form_id', $data ?? [], null);
        $this->setIfExists('product_mode', $data ?? [], null);
        $this->setIfExists('number_type', $data ?? [], null);
        $this->setIfExists('tag_type', $data ?? [], null);
        $this->setIfExists('series', $data ?? [], null);
        $this->setIfExists('sanctioning_organisation', $data ?? [], null);
        $this->setIfExists('organiser', $data ?? [], null);
        $this->setIfExists('product_default', $data ?? [], null);
        $this->setIfExists('product_number_add', $data ?? [], null);
        $this->setIfExists('product_number_first', $data ?? [], null);
        $this->setIfExists('product_tag_add', $data ?? [], null);
        $this->setIfExists('product_tag_first', $data ?? [], null);
        $this->setIfExists('categories', $data ?? [], null);
        $this->setIfExists('diciplines', $data ?? [], null);
        $this->setIfExists('race_types', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['venue']) && (mb_strlen($this->container['venue']) > 100)) {
            $invalidProperties[] = "invalid value for 'venue', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['venue']) && (mb_strlen($this->container['venue']) < 0)) {
            $invalidProperties[] = "invalid value for 'venue', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['address']) && (mb_strlen($this->container['address']) > 200)) {
            $invalidProperties[] = "invalid value for 'address', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['address']) && (mb_strlen($this->container['address']) < 0)) {
            $invalidProperties[] = "invalid value for 'address', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 50)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) < 0)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['province']) && (mb_strlen($this->container['province']) > 50)) {
            $invalidProperties[] = "invalid value for 'province', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['province']) && (mb_strlen($this->container['province']) < 0)) {
            $invalidProperties[] = "invalid value for 'province', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) > 50)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) < 0)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['contact_email']) && (mb_strlen($this->container['contact_email']) > 100)) {
            $invalidProperties[] = "invalid value for 'contact_email', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['contact_email']) && (mb_strlen($this->container['contact_email']) < 0)) {
            $invalidProperties[] = "invalid value for 'contact_email', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['contact_name']) && (mb_strlen($this->container['contact_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'contact_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['contact_name']) && (mb_strlen($this->container['contact_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'contact_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['contact_url']) && (mb_strlen($this->container['contact_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'contact_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['contact_url']) && (mb_strlen($this->container['contact_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'contact_url', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['timezone'] === null) {
            $invalidProperties[] = "'timezone' can't be null";
        }
        if ((mb_strlen($this->container['timezone']) > 50)) {
            $invalidProperties[] = "invalid value for 'timezone', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['timezone']) < 0)) {
            $invalidProperties[] = "invalid value for 'timezone', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['start_date_time'] === null) {
            $invalidProperties[] = "'start_date_time' can't be null";
        }
        if ($this->container['end_date_time'] === null) {
            $invalidProperties[] = "'end_date_time' can't be null";
        }
        if ($this->container['all_day'] === null) {
            $invalidProperties[] = "'all_day' can't be null";
        }
        if (!is_null($this->container['ticket_url']) && (mb_strlen($this->container['ticket_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'ticket_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['ticket_url']) && (mb_strlen($this->container['ticket_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'ticket_url', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['cost']) && (mb_strlen($this->container['cost']) > 20)) {
            $invalidProperties[] = "invalid value for 'cost', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['cost']) && (mb_strlen($this->container['cost']) < 0)) {
            $invalidProperties[] = "invalid value for 'cost', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['mobii_race_id']) && (mb_strlen($this->container['mobii_race_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'mobii_race_id', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['mobii_race_id']) && (mb_strlen($this->container['mobii_race_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'mobii_race_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['calendar_type']) && (mb_strlen($this->container['calendar_type']) > 200)) {
            $invalidProperties[] = "invalid value for 'calendar_type', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['calendar_type']) && (mb_strlen($this->container['calendar_type']) < 0)) {
            $invalidProperties[] = "invalid value for 'calendar_type', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['csa_membership_required'] === null) {
            $invalidProperties[] = "'csa_membership_required' can't be null";
        }
        if ($this->container['csa_license_required'] === null) {
            $invalidProperties[] = "'csa_license_required' can't be null";
        }
        if ($this->container['csa_strict_registration'] === null) {
            $invalidProperties[] = "'csa_strict_registration' can't be null";
        }
        if ($this->container['csa_day_license_disallow'] === null) {
            $invalidProperties[] = "'csa_day_license_disallow' can't be null";
        }
        $allowedValues = $this->getProductModeAllowableValues();
        if (!is_null($this->container['product_mode']) && !in_array($this->container['product_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'product_mode', must be one of '%s'",
                $this->container['product_mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling EventDTO., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling EventDTO., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets venue
     *
     * @return string|null
     */
    public function getVenue()
    {
        return $this->container['venue'];
    }

    /**
     * Sets venue
     *
     * @param string|null $venue venue
     *
     * @return self
     */
    public function setVenue($venue)
    {
        if (is_null($venue)) {
            throw new \InvalidArgumentException('non-nullable venue cannot be null');
        }
        if ((mb_strlen($venue) > 100)) {
            throw new \InvalidArgumentException('invalid length for $venue when calling EventDTO., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($venue) < 0)) {
            throw new \InvalidArgumentException('invalid length for $venue when calling EventDTO., must be bigger than or equal to 0.');
        }

        $this->container['venue'] = $venue;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        if ((mb_strlen($address) > 200)) {
            throw new \InvalidArgumentException('invalid length for $address when calling EventDTO., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($address) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address when calling EventDTO., must be bigger than or equal to 0.');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        if ((mb_strlen($city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $city when calling EventDTO., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $city when calling EventDTO., must be bigger than or equal to 0.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code postal_code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            throw new \InvalidArgumentException('non-nullable postal_code cannot be null');
        }
        if ((mb_strlen($postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling EventDTO., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($postal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling EventDTO., must be bigger than or equal to 0.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets province
     *
     * @return string|null
     */
    public function getProvince()
    {
        return $this->container['province'];
    }

    /**
     * Sets province
     *
     * @param string|null $province province
     *
     * @return self
     */
    public function setProvince($province)
    {
        if (is_null($province)) {
            throw new \InvalidArgumentException('non-nullable province cannot be null');
        }
        if ((mb_strlen($province) > 50)) {
            throw new \InvalidArgumentException('invalid length for $province when calling EventDTO., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($province) < 0)) {
            throw new \InvalidArgumentException('invalid length for $province when calling EventDTO., must be bigger than or equal to 0.');
        }

        $this->container['province'] = $province;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        if ((mb_strlen($country) > 50)) {
            throw new \InvalidArgumentException('invalid length for $country when calling EventDTO., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($country) < 0)) {
            throw new \InvalidArgumentException('invalid length for $country when calling EventDTO., must be bigger than or equal to 0.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float|null
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float|null $latitude latitude
     *
     * @return self
     */
    public function setLatitude($latitude)
    {
        if (is_null($latitude)) {
            throw new \InvalidArgumentException('non-nullable latitude cannot be null');
        }
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float|null
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float|null $longitude longitude
     *
     * @return self
     */
    public function setLongitude($longitude)
    {
        if (is_null($longitude)) {
            throw new \InvalidArgumentException('non-nullable longitude cannot be null');
        }
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets contact_email
     *
     * @return string|null
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     *
     * @param string|null $contact_email contact_email
     *
     * @return self
     */
    public function setContactEmail($contact_email)
    {
        if (is_null($contact_email)) {
            throw new \InvalidArgumentException('non-nullable contact_email cannot be null');
        }
        if ((mb_strlen($contact_email) > 100)) {
            throw new \InvalidArgumentException('invalid length for $contact_email when calling EventDTO., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($contact_email) < 0)) {
            throw new \InvalidArgumentException('invalid length for $contact_email when calling EventDTO., must be bigger than or equal to 0.');
        }

        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string|null
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string|null $contact_name contact_name
     *
     * @return self
     */
    public function setContactName($contact_name)
    {
        if (is_null($contact_name)) {
            throw new \InvalidArgumentException('non-nullable contact_name cannot be null');
        }
        if ((mb_strlen($contact_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $contact_name when calling EventDTO., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($contact_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $contact_name when calling EventDTO., must be bigger than or equal to 0.');
        }

        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets contact_url
     *
     * @return string|null
     */
    public function getContactUrl()
    {
        return $this->container['contact_url'];
    }

    /**
     * Sets contact_url
     *
     * @param string|null $contact_url contact_url
     *
     * @return self
     */
    public function setContactUrl($contact_url)
    {
        if (is_null($contact_url)) {
            throw new \InvalidArgumentException('non-nullable contact_url cannot be null');
        }
        if ((mb_strlen($contact_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $contact_url when calling EventDTO., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($contact_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $contact_url when calling EventDTO., must be bigger than or equal to 0.');
        }

        $this->container['contact_url'] = $contact_url;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone timezone
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        if ((mb_strlen($timezone) > 50)) {
            throw new \InvalidArgumentException('invalid length for $timezone when calling EventDTO., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($timezone) < 0)) {
            throw new \InvalidArgumentException('invalid length for $timezone when calling EventDTO., must be bigger than or equal to 0.');
        }

        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets start_date_time
     *
     * @return \DateTime
     */
    public function getStartDateTime()
    {
        return $this->container['start_date_time'];
    }

    /**
     * Sets start_date_time
     *
     * @param \DateTime $start_date_time start_date_time
     *
     * @return self
     */
    public function setStartDateTime($start_date_time)
    {
        if (is_null($start_date_time)) {
            throw new \InvalidArgumentException('non-nullable start_date_time cannot be null');
        }
        $this->container['start_date_time'] = $start_date_time;

        return $this;
    }

    /**
     * Gets end_date_time
     *
     * @return \DateTime
     */
    public function getEndDateTime()
    {
        return $this->container['end_date_time'];
    }

    /**
     * Sets end_date_time
     *
     * @param \DateTime $end_date_time end_date_time
     *
     * @return self
     */
    public function setEndDateTime($end_date_time)
    {
        if (is_null($end_date_time)) {
            throw new \InvalidArgumentException('non-nullable end_date_time cannot be null');
        }
        $this->container['end_date_time'] = $end_date_time;

        return $this;
    }

    /**
     * Gets all_day
     *
     * @return bool
     */
    public function getAllDay()
    {
        return $this->container['all_day'];
    }

    /**
     * Sets all_day
     *
     * @param bool $all_day all_day
     *
     * @return self
     */
    public function setAllDay($all_day)
    {
        if (is_null($all_day)) {
            throw new \InvalidArgumentException('non-nullable all_day cannot be null');
        }
        $this->container['all_day'] = $all_day;

        return $this;
    }

    /**
     * Gets ticket_url
     *
     * @return string|null
     */
    public function getTicketUrl()
    {
        return $this->container['ticket_url'];
    }

    /**
     * Sets ticket_url
     *
     * @param string|null $ticket_url ticket_url
     *
     * @return self
     */
    public function setTicketUrl($ticket_url)
    {
        if (is_null($ticket_url)) {
            throw new \InvalidArgumentException('non-nullable ticket_url cannot be null');
        }
        if ((mb_strlen($ticket_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $ticket_url when calling EventDTO., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($ticket_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $ticket_url when calling EventDTO., must be bigger than or equal to 0.');
        }

        $this->container['ticket_url'] = $ticket_url;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return string|null
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param string|null $cost cost
     *
     * @return self
     */
    public function setCost($cost)
    {
        if (is_null($cost)) {
            throw new \InvalidArgumentException('non-nullable cost cannot be null');
        }
        if ((mb_strlen($cost) > 20)) {
            throw new \InvalidArgumentException('invalid length for $cost when calling EventDTO., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($cost) < 0)) {
            throw new \InvalidArgumentException('invalid length for $cost when calling EventDTO., must be bigger than or equal to 0.');
        }

        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets result_time_rounding
     *
     * @return int|null
     */
    public function getResultTimeRounding()
    {
        return $this->container['result_time_rounding'];
    }

    /**
     * Sets result_time_rounding
     *
     * @param int|null $result_time_rounding result_time_rounding
     *
     * @return self
     */
    public function setResultTimeRounding($result_time_rounding)
    {
        if (is_null($result_time_rounding)) {
            throw new \InvalidArgumentException('non-nullable result_time_rounding cannot be null');
        }
        $this->container['result_time_rounding'] = $result_time_rounding;

        return $this;
    }

    /**
     * Gets mobii_race_id
     *
     * @return string|null
     */
    public function getMobiiRaceId()
    {
        return $this->container['mobii_race_id'];
    }

    /**
     * Sets mobii_race_id
     *
     * @param string|null $mobii_race_id mobii_race_id
     *
     * @return self
     */
    public function setMobiiRaceId($mobii_race_id)
    {
        if (is_null($mobii_race_id)) {
            throw new \InvalidArgumentException('non-nullable mobii_race_id cannot be null');
        }
        if ((mb_strlen($mobii_race_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $mobii_race_id when calling EventDTO., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($mobii_race_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $mobii_race_id when calling EventDTO., must be bigger than or equal to 0.');
        }

        $this->container['mobii_race_id'] = $mobii_race_id;

        return $this;
    }

    /**
     * Gets calendar_type
     *
     * @return string|null
     */
    public function getCalendarType()
    {
        return $this->container['calendar_type'];
    }

    /**
     * Sets calendar_type
     *
     * @param string|null $calendar_type Product/component used to visualise the calendar listing.
     *
     * @return self
     */
    public function setCalendarType($calendar_type)
    {
        if (is_null($calendar_type)) {
            throw new \InvalidArgumentException('non-nullable calendar_type cannot be null');
        }
        if ((mb_strlen($calendar_type) > 200)) {
            throw new \InvalidArgumentException('invalid length for $calendar_type when calling EventDTO., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($calendar_type) < 0)) {
            throw new \InvalidArgumentException('invalid length for $calendar_type when calling EventDTO., must be bigger than or equal to 0.');
        }

        $this->container['calendar_type'] = $calendar_type;

        return $this;
    }

    /**
     * Gets csa_membership_required
     *
     * @return bool
     */
    public function getCsaMembershipRequired()
    {
        return $this->container['csa_membership_required'];
    }

    /**
     * Sets csa_membership_required
     *
     * @param bool $csa_membership_required Should CSA Membership checking be enabled for this event? If set it overrides the value set in the Series.
     *
     * @return self
     */
    public function setCsaMembershipRequired($csa_membership_required)
    {
        if (is_null($csa_membership_required)) {
            throw new \InvalidArgumentException('non-nullable csa_membership_required cannot be null');
        }
        $this->container['csa_membership_required'] = $csa_membership_required;

        return $this;
    }

    /**
     * Gets csa_license_required
     *
     * @return bool
     */
    public function getCsaLicenseRequired()
    {
        return $this->container['csa_license_required'];
    }

    /**
     * Sets csa_license_required
     *
     * @param bool $csa_license_required Should CSA License checking be enabled for this event? If set it overrides the value set in the Series.
     *
     * @return self
     */
    public function setCsaLicenseRequired($csa_license_required)
    {
        if (is_null($csa_license_required)) {
            throw new \InvalidArgumentException('non-nullable csa_license_required cannot be null');
        }
        $this->container['csa_license_required'] = $csa_license_required;

        return $this;
    }

    /**
     * Gets csa_strict_registration
     *
     * @return bool
     */
    public function getCsaStrictRegistration()
    {
        return $this->container['csa_strict_registration'];
    }

    /**
     * Sets csa_strict_registration
     *
     * @param bool $csa_strict_registration Set to TRUE if CSA membership and license checking cannot be skipped during registration. If set it overrides the value set in the Series.
     *
     * @return self
     */
    public function setCsaStrictRegistration($csa_strict_registration)
    {
        if (is_null($csa_strict_registration)) {
            throw new \InvalidArgumentException('non-nullable csa_strict_registration cannot be null');
        }
        $this->container['csa_strict_registration'] = $csa_strict_registration;

        return $this;
    }

    /**
     * Gets csa_day_license_disallow
     *
     * @return bool
     */
    public function getCsaDayLicenseDisallow()
    {
        return $this->container['csa_day_license_disallow'];
    }

    /**
     * Sets csa_day_license_disallow
     *
     * @param bool $csa_day_license_disallow Set to TRUE to disapply CSA day licenses for this event. If set it overrides the value set in the Series.
     *
     * @return self
     */
    public function setCsaDayLicenseDisallow($csa_day_license_disallow)
    {
        if (is_null($csa_day_license_disallow)) {
            throw new \InvalidArgumentException('non-nullable csa_day_license_disallow cannot be null');
        }
        $this->container['csa_day_license_disallow'] = $csa_day_license_disallow;

        return $this;
    }

    /**
     * Gets form_id
     *
     * @return int|null
     */
    public function getFormId()
    {
        return $this->container['form_id'];
    }

    /**
     * Sets form_id
     *
     * @param int|null $form_id Set the Person questionnaire form to be used during registration. If set it overrides the value set in the Series.
     *
     * @return self
     */
    public function setFormId($form_id)
    {
        if (is_null($form_id)) {
            throw new \InvalidArgumentException('non-nullable form_id cannot be null');
        }
        $this->container['form_id'] = $form_id;

        return $this;
    }

    /**
     * Gets product_mode
     *
     * @return string|null
     */
    public function getProductMode()
    {
        return $this->container['product_mode'];
    }

    /**
     * Sets product_mode
     *
     * @param string|null $product_mode Determines how category products will be handled. If set it overrides the value set in the Series.
     *
     * @return self
     */
    public function setProductMode($product_mode)
    {
        if (is_null($product_mode)) {
            throw new \InvalidArgumentException('non-nullable product_mode cannot be null');
        }
        $allowedValues = $this->getProductModeAllowableValues();
        if (!in_array($product_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'product_mode', must be one of '%s'",
                    $product_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['product_mode'] = $product_mode;

        return $this;
    }

    /**
     * Gets number_type
     *
     * @return \Idealogic\RegistrationAPI\Model\NumberTypeDTO|null
     */
    public function getNumberType()
    {
        return $this->container['number_type'];
    }

    /**
     * Sets number_type
     *
     * @param \Idealogic\RegistrationAPI\Model\NumberTypeDTO|null $number_type number_type
     *
     * @return self
     */
    public function setNumberType($number_type)
    {
        if (is_null($number_type)) {
            throw new \InvalidArgumentException('non-nullable number_type cannot be null');
        }
        $this->container['number_type'] = $number_type;

        return $this;
    }

    /**
     * Gets tag_type
     *
     * @return \Idealogic\RegistrationAPI\Model\TagTypeDTO|null
     */
    public function getTagType()
    {
        return $this->container['tag_type'];
    }

    /**
     * Sets tag_type
     *
     * @param \Idealogic\RegistrationAPI\Model\TagTypeDTO|null $tag_type tag_type
     *
     * @return self
     */
    public function setTagType($tag_type)
    {
        if (is_null($tag_type)) {
            throw new \InvalidArgumentException('non-nullable tag_type cannot be null');
        }
        $this->container['tag_type'] = $tag_type;

        return $this;
    }

    /**
     * Gets series
     *
     * @return \Idealogic\RegistrationAPI\Model\SeriesDTO|null
     */
    public function getSeries()
    {
        return $this->container['series'];
    }

    /**
     * Sets series
     *
     * @param \Idealogic\RegistrationAPI\Model\SeriesDTO|null $series series
     *
     * @return self
     */
    public function setSeries($series)
    {
        if (is_null($series)) {
            throw new \InvalidArgumentException('non-nullable series cannot be null');
        }
        $this->container['series'] = $series;

        return $this;
    }

    /**
     * Gets sanctioning_organisation
     *
     * @return \Idealogic\RegistrationAPI\Model\OrganisationDTO|null
     */
    public function getSanctioningOrganisation()
    {
        return $this->container['sanctioning_organisation'];
    }

    /**
     * Sets sanctioning_organisation
     *
     * @param \Idealogic\RegistrationAPI\Model\OrganisationDTO|null $sanctioning_organisation sanctioning_organisation
     *
     * @return self
     */
    public function setSanctioningOrganisation($sanctioning_organisation)
    {
        if (is_null($sanctioning_organisation)) {
            throw new \InvalidArgumentException('non-nullable sanctioning_organisation cannot be null');
        }
        $this->container['sanctioning_organisation'] = $sanctioning_organisation;

        return $this;
    }

    /**
     * Gets organiser
     *
     * @return \Idealogic\RegistrationAPI\Model\OrganisationDTO|null
     */
    public function getOrganiser()
    {
        return $this->container['organiser'];
    }

    /**
     * Sets organiser
     *
     * @param \Idealogic\RegistrationAPI\Model\OrganisationDTO|null $organiser organiser
     *
     * @return self
     */
    public function setOrganiser($organiser)
    {
        if (is_null($organiser)) {
            throw new \InvalidArgumentException('non-nullable organiser cannot be null');
        }
        $this->container['organiser'] = $organiser;

        return $this;
    }

    /**
     * Gets product_default
     *
     * @return \Idealogic\RegistrationAPI\Model\ProductDTO|null
     */
    public function getProductDefault()
    {
        return $this->container['product_default'];
    }

    /**
     * Sets product_default
     *
     * @param \Idealogic\RegistrationAPI\Model\ProductDTO|null $product_default product_default
     *
     * @return self
     */
    public function setProductDefault($product_default)
    {
        if (is_null($product_default)) {
            throw new \InvalidArgumentException('non-nullable product_default cannot be null');
        }
        $this->container['product_default'] = $product_default;

        return $this;
    }

    /**
     * Gets product_number_add
     *
     * @return \Idealogic\RegistrationAPI\Model\ProductDTO|null
     */
    public function getProductNumberAdd()
    {
        return $this->container['product_number_add'];
    }

    /**
     * Sets product_number_add
     *
     * @param \Idealogic\RegistrationAPI\Model\ProductDTO|null $product_number_add product_number_add
     *
     * @return self
     */
    public function setProductNumberAdd($product_number_add)
    {
        if (is_null($product_number_add)) {
            throw new \InvalidArgumentException('non-nullable product_number_add cannot be null');
        }
        $this->container['product_number_add'] = $product_number_add;

        return $this;
    }

    /**
     * Gets product_number_first
     *
     * @return \Idealogic\RegistrationAPI\Model\ProductDTO|null
     */
    public function getProductNumberFirst()
    {
        return $this->container['product_number_first'];
    }

    /**
     * Sets product_number_first
     *
     * @param \Idealogic\RegistrationAPI\Model\ProductDTO|null $product_number_first product_number_first
     *
     * @return self
     */
    public function setProductNumberFirst($product_number_first)
    {
        if (is_null($product_number_first)) {
            throw new \InvalidArgumentException('non-nullable product_number_first cannot be null');
        }
        $this->container['product_number_first'] = $product_number_first;

        return $this;
    }

    /**
     * Gets product_tag_add
     *
     * @return \Idealogic\RegistrationAPI\Model\ProductDTO|null
     */
    public function getProductTagAdd()
    {
        return $this->container['product_tag_add'];
    }

    /**
     * Sets product_tag_add
     *
     * @param \Idealogic\RegistrationAPI\Model\ProductDTO|null $product_tag_add product_tag_add
     *
     * @return self
     */
    public function setProductTagAdd($product_tag_add)
    {
        if (is_null($product_tag_add)) {
            throw new \InvalidArgumentException('non-nullable product_tag_add cannot be null');
        }
        $this->container['product_tag_add'] = $product_tag_add;

        return $this;
    }

    /**
     * Gets product_tag_first
     *
     * @return \Idealogic\RegistrationAPI\Model\ProductDTO|null
     */
    public function getProductTagFirst()
    {
        return $this->container['product_tag_first'];
    }

    /**
     * Sets product_tag_first
     *
     * @param \Idealogic\RegistrationAPI\Model\ProductDTO|null $product_tag_first product_tag_first
     *
     * @return self
     */
    public function setProductTagFirst($product_tag_first)
    {
        if (is_null($product_tag_first)) {
            throw new \InvalidArgumentException('non-nullable product_tag_first cannot be null');
        }
        $this->container['product_tag_first'] = $product_tag_first;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \Idealogic\RegistrationAPI\Model\EventCategoryDTO[]|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \Idealogic\RegistrationAPI\Model\EventCategoryDTO[]|null $categories Categories used by the event.
     *
     * @return self
     */
    public function setCategories($categories)
    {
        if (is_null($categories)) {
            throw new \InvalidArgumentException('non-nullable categories cannot be null');
        }


        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets diciplines
     *
     * @return \Idealogic\RegistrationAPI\Model\DisciplineDTO[]|null
     */
    public function getDiciplines()
    {
        return $this->container['diciplines'];
    }

    /**
     * Sets diciplines
     *
     * @param \Idealogic\RegistrationAPI\Model\DisciplineDTO[]|null $diciplines diciplines
     *
     * @return self
     */
    public function setDiciplines($diciplines)
    {
        if (is_null($diciplines)) {
            throw new \InvalidArgumentException('non-nullable diciplines cannot be null');
        }


        $this->container['diciplines'] = $diciplines;

        return $this;
    }

    /**
     * Gets race_types
     *
     * @return \Idealogic\RegistrationAPI\Model\RaceTypeDTO[]|null
     */
    public function getRaceTypes()
    {
        return $this->container['race_types'];
    }

    /**
     * Sets race_types
     *
     * @param \Idealogic\RegistrationAPI\Model\RaceTypeDTO[]|null $race_types race_types
     *
     * @return self
     */
    public function setRaceTypes($race_types)
    {
        if (is_null($race_types)) {
            throw new \InvalidArgumentException('non-nullable race_types cannot be null');
        }


        $this->container['race_types'] = $race_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


