<?php
/**
 * SeriesDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Idealogic\RegistrationAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Idealogic Event and Member Admin Service API
 *
 * Adminstrative services for managing events and members
 *
 * The version of the OpenAPI document: 2.2.0-SNAPSHOT
 * Contact: development@idealogic.co.za
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Idealogic\RegistrationAPI\Model;

use \ArrayAccess;
use \Idealogic\RegistrationAPI\ObjectSerializer;

/**
 * SeriesDTO Class Doc Comment
 *
 * @category Class
 * @description A series is a collection of events. They are grouped together to have a final outcome in terms of standing or ranking, or alternatively to share common configuration parameters (i.e. re-usable race numbers) and/or fees (i.e. an annual series entry).  An event could be part of multiple series.  A series can be marked as private if it is used solely for administrative/operational purposes, such as tracking participants in a given season.
 * @package  Idealogic\RegistrationAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SeriesDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SeriesDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'csa_membership_required' => 'bool',
        'csa_license_required' => 'bool',
        'csa_strict_registration' => 'bool',
        'csa_day_license_disallow' => 'bool',
        'form_id' => 'int',
        'product_mode' => 'string',
        'custom_list1_required' => 'bool',
        'custom_list2_required' => 'bool',
        'custom_list3_required' => 'bool',
        'custom_list1_name' => 'string',
        'custom_list2_name' => 'string',
        'custom_list3_name' => 'string',
        'number_type' => '\Idealogic\RegistrationAPI\Model\NumberTypeDTO',
        'tag_type' => '\Idealogic\RegistrationAPI\Model\TagTypeDTO',
        'sanctioning_organisation' => '\Idealogic\RegistrationAPI\Model\OrganisationDTO',
        'organiser' => '\Idealogic\RegistrationAPI\Model\OrganisationDTO',
        'series_product_default' => '\Idealogic\RegistrationAPI\Model\ProductDTO',
        'product_default' => '\Idealogic\RegistrationAPI\Model\ProductDTO',
        'product_number_add' => '\Idealogic\RegistrationAPI\Model\ProductDTO',
        'product_number_first' => '\Idealogic\RegistrationAPI\Model\ProductDTO',
        'product_tag_add' => '\Idealogic\RegistrationAPI\Model\ProductDTO',
        'product_tag_first' => '\Idealogic\RegistrationAPI\Model\ProductDTO',
        'custom_list1' => '\Idealogic\RegistrationAPI\Model\CustomListDTO',
        'custom_list2' => '\Idealogic\RegistrationAPI\Model\CustomListDTO',
        'custom_list3' => '\Idealogic\RegistrationAPI\Model\CustomListDTO',
        'enrol_process' => '\Idealogic\RegistrationAPI\Model\ProcessDefinitionDTO',
        'disciplines' => '\Idealogic\RegistrationAPI\Model\DisciplineDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'csa_membership_required' => null,
        'csa_license_required' => null,
        'csa_strict_registration' => null,
        'csa_day_license_disallow' => null,
        'form_id' => 'int64',
        'product_mode' => null,
        'custom_list1_required' => null,
        'custom_list2_required' => null,
        'custom_list3_required' => null,
        'custom_list1_name' => null,
        'custom_list2_name' => null,
        'custom_list3_name' => null,
        'number_type' => null,
        'tag_type' => null,
        'sanctioning_organisation' => null,
        'organiser' => null,
        'series_product_default' => null,
        'product_default' => null,
        'product_number_add' => null,
        'product_number_first' => null,
        'product_tag_add' => null,
        'product_tag_first' => null,
        'custom_list1' => null,
        'custom_list2' => null,
        'custom_list3' => null,
        'enrol_process' => null,
        'disciplines' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'csa_membership_required' => false,
        'csa_license_required' => false,
        'csa_strict_registration' => false,
        'csa_day_license_disallow' => false,
        'form_id' => false,
        'product_mode' => false,
        'custom_list1_required' => false,
        'custom_list2_required' => false,
        'custom_list3_required' => false,
        'custom_list1_name' => false,
        'custom_list2_name' => false,
        'custom_list3_name' => false,
        'number_type' => false,
        'tag_type' => false,
        'sanctioning_organisation' => false,
        'organiser' => false,
        'series_product_default' => false,
        'product_default' => false,
        'product_number_add' => false,
        'product_number_first' => false,
        'product_tag_add' => false,
        'product_tag_first' => false,
        'custom_list1' => false,
        'custom_list2' => false,
        'custom_list3' => false,
        'enrol_process' => false,
        'disciplines' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'csa_membership_required' => 'csaMembershipRequired',
        'csa_license_required' => 'csaLicenseRequired',
        'csa_strict_registration' => 'csaStrictRegistration',
        'csa_day_license_disallow' => 'csaDayLicenseDisallow',
        'form_id' => 'formId',
        'product_mode' => 'productMode',
        'custom_list1_required' => 'customList1Required',
        'custom_list2_required' => 'customList2Required',
        'custom_list3_required' => 'customList3Required',
        'custom_list1_name' => 'customList1Name',
        'custom_list2_name' => 'customList2Name',
        'custom_list3_name' => 'customList3Name',
        'number_type' => 'numberType',
        'tag_type' => 'tagType',
        'sanctioning_organisation' => 'sanctioningOrganisation',
        'organiser' => 'organiser',
        'series_product_default' => 'seriesProductDefault',
        'product_default' => 'productDefault',
        'product_number_add' => 'productNumberAdd',
        'product_number_first' => 'productNumberFirst',
        'product_tag_add' => 'productTagAdd',
        'product_tag_first' => 'productTagFirst',
        'custom_list1' => 'customList1',
        'custom_list2' => 'customList2',
        'custom_list3' => 'customList3',
        'enrol_process' => 'enrolProcess',
        'disciplines' => 'disciplines'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'csa_membership_required' => 'setCsaMembershipRequired',
        'csa_license_required' => 'setCsaLicenseRequired',
        'csa_strict_registration' => 'setCsaStrictRegistration',
        'csa_day_license_disallow' => 'setCsaDayLicenseDisallow',
        'form_id' => 'setFormId',
        'product_mode' => 'setProductMode',
        'custom_list1_required' => 'setCustomList1Required',
        'custom_list2_required' => 'setCustomList2Required',
        'custom_list3_required' => 'setCustomList3Required',
        'custom_list1_name' => 'setCustomList1Name',
        'custom_list2_name' => 'setCustomList2Name',
        'custom_list3_name' => 'setCustomList3Name',
        'number_type' => 'setNumberType',
        'tag_type' => 'setTagType',
        'sanctioning_organisation' => 'setSanctioningOrganisation',
        'organiser' => 'setOrganiser',
        'series_product_default' => 'setSeriesProductDefault',
        'product_default' => 'setProductDefault',
        'product_number_add' => 'setProductNumberAdd',
        'product_number_first' => 'setProductNumberFirst',
        'product_tag_add' => 'setProductTagAdd',
        'product_tag_first' => 'setProductTagFirst',
        'custom_list1' => 'setCustomList1',
        'custom_list2' => 'setCustomList2',
        'custom_list3' => 'setCustomList3',
        'enrol_process' => 'setEnrolProcess',
        'disciplines' => 'setDisciplines'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'csa_membership_required' => 'getCsaMembershipRequired',
        'csa_license_required' => 'getCsaLicenseRequired',
        'csa_strict_registration' => 'getCsaStrictRegistration',
        'csa_day_license_disallow' => 'getCsaDayLicenseDisallow',
        'form_id' => 'getFormId',
        'product_mode' => 'getProductMode',
        'custom_list1_required' => 'getCustomList1Required',
        'custom_list2_required' => 'getCustomList2Required',
        'custom_list3_required' => 'getCustomList3Required',
        'custom_list1_name' => 'getCustomList1Name',
        'custom_list2_name' => 'getCustomList2Name',
        'custom_list3_name' => 'getCustomList3Name',
        'number_type' => 'getNumberType',
        'tag_type' => 'getTagType',
        'sanctioning_organisation' => 'getSanctioningOrganisation',
        'organiser' => 'getOrganiser',
        'series_product_default' => 'getSeriesProductDefault',
        'product_default' => 'getProductDefault',
        'product_number_add' => 'getProductNumberAdd',
        'product_number_first' => 'getProductNumberFirst',
        'product_tag_add' => 'getProductTagAdd',
        'product_tag_first' => 'getProductTagFirst',
        'custom_list1' => 'getCustomList1',
        'custom_list2' => 'getCustomList2',
        'custom_list3' => 'getCustomList3',
        'enrol_process' => 'getEnrolProcess',
        'disciplines' => 'getDisciplines'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PRODUCT_MODE_CATEGORY_ELSE_EVENT = 'CATEGORY_ELSE_EVENT';
    public const PRODUCT_MODE_BOTH = 'BOTH';
    public const PRODUCT_MODE_EVENT_ONLY = 'EVENT_ONLY';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductModeAllowableValues()
    {
        return [
            self::PRODUCT_MODE_CATEGORY_ELSE_EVENT,
            self::PRODUCT_MODE_BOTH,
            self::PRODUCT_MODE_EVENT_ONLY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('csa_membership_required', $data ?? [], null);
        $this->setIfExists('csa_license_required', $data ?? [], null);
        $this->setIfExists('csa_strict_registration', $data ?? [], null);
        $this->setIfExists('csa_day_license_disallow', $data ?? [], null);
        $this->setIfExists('form_id', $data ?? [], null);
        $this->setIfExists('product_mode', $data ?? [], null);
        $this->setIfExists('custom_list1_required', $data ?? [], null);
        $this->setIfExists('custom_list2_required', $data ?? [], null);
        $this->setIfExists('custom_list3_required', $data ?? [], null);
        $this->setIfExists('custom_list1_name', $data ?? [], null);
        $this->setIfExists('custom_list2_name', $data ?? [], null);
        $this->setIfExists('custom_list3_name', $data ?? [], null);
        $this->setIfExists('number_type', $data ?? [], null);
        $this->setIfExists('tag_type', $data ?? [], null);
        $this->setIfExists('sanctioning_organisation', $data ?? [], null);
        $this->setIfExists('organiser', $data ?? [], null);
        $this->setIfExists('series_product_default', $data ?? [], null);
        $this->setIfExists('product_default', $data ?? [], null);
        $this->setIfExists('product_number_add', $data ?? [], null);
        $this->setIfExists('product_number_first', $data ?? [], null);
        $this->setIfExists('product_tag_add', $data ?? [], null);
        $this->setIfExists('product_tag_first', $data ?? [], null);
        $this->setIfExists('custom_list1', $data ?? [], null);
        $this->setIfExists('custom_list2', $data ?? [], null);
        $this->setIfExists('custom_list3', $data ?? [], null);
        $this->setIfExists('enrol_process', $data ?? [], null);
        $this->setIfExists('disciplines', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['csa_membership_required'] === null) {
            $invalidProperties[] = "'csa_membership_required' can't be null";
        }
        if ($this->container['csa_license_required'] === null) {
            $invalidProperties[] = "'csa_license_required' can't be null";
        }
        if ($this->container['csa_strict_registration'] === null) {
            $invalidProperties[] = "'csa_strict_registration' can't be null";
        }
        if ($this->container['csa_day_license_disallow'] === null) {
            $invalidProperties[] = "'csa_day_license_disallow' can't be null";
        }
        $allowedValues = $this->getProductModeAllowableValues();
        if (!is_null($this->container['product_mode']) && !in_array($this->container['product_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'product_mode', must be one of '%s'",
                $this->container['product_mode'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['custom_list1_required'] === null) {
            $invalidProperties[] = "'custom_list1_required' can't be null";
        }
        if ($this->container['custom_list2_required'] === null) {
            $invalidProperties[] = "'custom_list2_required' can't be null";
        }
        if ($this->container['custom_list3_required'] === null) {
            $invalidProperties[] = "'custom_list3_required' can't be null";
        }
        if (!is_null($this->container['custom_list1_name']) && (mb_strlen($this->container['custom_list1_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_list1_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_list1_name']) && (mb_strlen($this->container['custom_list1_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'custom_list1_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['custom_list2_name']) && (mb_strlen($this->container['custom_list2_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_list2_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_list2_name']) && (mb_strlen($this->container['custom_list2_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'custom_list2_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['custom_list3_name']) && (mb_strlen($this->container['custom_list3_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_list3_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_list3_name']) && (mb_strlen($this->container['custom_list3_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'custom_list3_name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['sanctioning_organisation'] === null) {
            $invalidProperties[] = "'sanctioning_organisation' can't be null";
        }
        if ($this->container['organiser'] === null) {
            $invalidProperties[] = "'organiser' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SeriesDTO., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SeriesDTO., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets csa_membership_required
     *
     * @return bool
     */
    public function getCsaMembershipRequired()
    {
        return $this->container['csa_membership_required'];
    }

    /**
     * Sets csa_membership_required
     *
     * @param bool $csa_membership_required Should CSA Membership checking be enabled for this series?
     *
     * @return self
     */
    public function setCsaMembershipRequired($csa_membership_required)
    {
        if (is_null($csa_membership_required)) {
            throw new \InvalidArgumentException('non-nullable csa_membership_required cannot be null');
        }
        $this->container['csa_membership_required'] = $csa_membership_required;

        return $this;
    }

    /**
     * Gets csa_license_required
     *
     * @return bool
     */
    public function getCsaLicenseRequired()
    {
        return $this->container['csa_license_required'];
    }

    /**
     * Sets csa_license_required
     *
     * @param bool $csa_license_required Should CSA License checking be enabled for this series?
     *
     * @return self
     */
    public function setCsaLicenseRequired($csa_license_required)
    {
        if (is_null($csa_license_required)) {
            throw new \InvalidArgumentException('non-nullable csa_license_required cannot be null');
        }
        $this->container['csa_license_required'] = $csa_license_required;

        return $this;
    }

    /**
     * Gets csa_strict_registration
     *
     * @return bool
     */
    public function getCsaStrictRegistration()
    {
        return $this->container['csa_strict_registration'];
    }

    /**
     * Sets csa_strict_registration
     *
     * @param bool $csa_strict_registration Set to TRUE if CSA membership and license checking cannot be skipped during registration.
     *
     * @return self
     */
    public function setCsaStrictRegistration($csa_strict_registration)
    {
        if (is_null($csa_strict_registration)) {
            throw new \InvalidArgumentException('non-nullable csa_strict_registration cannot be null');
        }
        $this->container['csa_strict_registration'] = $csa_strict_registration;

        return $this;
    }

    /**
     * Gets csa_day_license_disallow
     *
     * @return bool
     */
    public function getCsaDayLicenseDisallow()
    {
        return $this->container['csa_day_license_disallow'];
    }

    /**
     * Sets csa_day_license_disallow
     *
     * @param bool $csa_day_license_disallow Set to TRUE to disapply CSA day licenses for events in this series.
     *
     * @return self
     */
    public function setCsaDayLicenseDisallow($csa_day_license_disallow)
    {
        if (is_null($csa_day_license_disallow)) {
            throw new \InvalidArgumentException('non-nullable csa_day_license_disallow cannot be null');
        }
        $this->container['csa_day_license_disallow'] = $csa_day_license_disallow;

        return $this;
    }

    /**
     * Gets form_id
     *
     * @return int|null
     */
    public function getFormId()
    {
        return $this->container['form_id'];
    }

    /**
     * Sets form_id
     *
     * @param int|null $form_id Set the Person questionnaire form to be used during registration.
     *
     * @return self
     */
    public function setFormId($form_id)
    {
        if (is_null($form_id)) {
            throw new \InvalidArgumentException('non-nullable form_id cannot be null');
        }
        $this->container['form_id'] = $form_id;

        return $this;
    }

    /**
     * Gets product_mode
     *
     * @return string|null
     */
    public function getProductMode()
    {
        return $this->container['product_mode'];
    }

    /**
     * Sets product_mode
     *
     * @param string|null $product_mode Determines how category products will be handled.
     *
     * @return self
     */
    public function setProductMode($product_mode)
    {
        if (is_null($product_mode)) {
            throw new \InvalidArgumentException('non-nullable product_mode cannot be null');
        }
        $allowedValues = $this->getProductModeAllowableValues();
        if (!in_array($product_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'product_mode', must be one of '%s'",
                    $product_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['product_mode'] = $product_mode;

        return $this;
    }

    /**
     * Gets custom_list1_required
     *
     * @return bool
     */
    public function getCustomList1Required()
    {
        return $this->container['custom_list1_required'];
    }

    /**
     * Sets custom_list1_required
     *
     * @param bool $custom_list1_required custom_list1_required
     *
     * @return self
     */
    public function setCustomList1Required($custom_list1_required)
    {
        if (is_null($custom_list1_required)) {
            throw new \InvalidArgumentException('non-nullable custom_list1_required cannot be null');
        }
        $this->container['custom_list1_required'] = $custom_list1_required;

        return $this;
    }

    /**
     * Gets custom_list2_required
     *
     * @return bool
     */
    public function getCustomList2Required()
    {
        return $this->container['custom_list2_required'];
    }

    /**
     * Sets custom_list2_required
     *
     * @param bool $custom_list2_required custom_list2_required
     *
     * @return self
     */
    public function setCustomList2Required($custom_list2_required)
    {
        if (is_null($custom_list2_required)) {
            throw new \InvalidArgumentException('non-nullable custom_list2_required cannot be null');
        }
        $this->container['custom_list2_required'] = $custom_list2_required;

        return $this;
    }

    /**
     * Gets custom_list3_required
     *
     * @return bool
     */
    public function getCustomList3Required()
    {
        return $this->container['custom_list3_required'];
    }

    /**
     * Sets custom_list3_required
     *
     * @param bool $custom_list3_required custom_list3_required
     *
     * @return self
     */
    public function setCustomList3Required($custom_list3_required)
    {
        if (is_null($custom_list3_required)) {
            throw new \InvalidArgumentException('non-nullable custom_list3_required cannot be null');
        }
        $this->container['custom_list3_required'] = $custom_list3_required;

        return $this;
    }

    /**
     * Gets custom_list1_name
     *
     * @return string|null
     */
    public function getCustomList1Name()
    {
        return $this->container['custom_list1_name'];
    }

    /**
     * Sets custom_list1_name
     *
     * @param string|null $custom_list1_name custom_list1_name
     *
     * @return self
     */
    public function setCustomList1Name($custom_list1_name)
    {
        if (is_null($custom_list1_name)) {
            throw new \InvalidArgumentException('non-nullable custom_list1_name cannot be null');
        }
        if ((mb_strlen($custom_list1_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_list1_name when calling SeriesDTO., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($custom_list1_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $custom_list1_name when calling SeriesDTO., must be bigger than or equal to 0.');
        }

        $this->container['custom_list1_name'] = $custom_list1_name;

        return $this;
    }

    /**
     * Gets custom_list2_name
     *
     * @return string|null
     */
    public function getCustomList2Name()
    {
        return $this->container['custom_list2_name'];
    }

    /**
     * Sets custom_list2_name
     *
     * @param string|null $custom_list2_name custom_list2_name
     *
     * @return self
     */
    public function setCustomList2Name($custom_list2_name)
    {
        if (is_null($custom_list2_name)) {
            throw new \InvalidArgumentException('non-nullable custom_list2_name cannot be null');
        }
        if ((mb_strlen($custom_list2_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_list2_name when calling SeriesDTO., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($custom_list2_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $custom_list2_name when calling SeriesDTO., must be bigger than or equal to 0.');
        }

        $this->container['custom_list2_name'] = $custom_list2_name;

        return $this;
    }

    /**
     * Gets custom_list3_name
     *
     * @return string|null
     */
    public function getCustomList3Name()
    {
        return $this->container['custom_list3_name'];
    }

    /**
     * Sets custom_list3_name
     *
     * @param string|null $custom_list3_name custom_list3_name
     *
     * @return self
     */
    public function setCustomList3Name($custom_list3_name)
    {
        if (is_null($custom_list3_name)) {
            throw new \InvalidArgumentException('non-nullable custom_list3_name cannot be null');
        }
        if ((mb_strlen($custom_list3_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_list3_name when calling SeriesDTO., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($custom_list3_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $custom_list3_name when calling SeriesDTO., must be bigger than or equal to 0.');
        }

        $this->container['custom_list3_name'] = $custom_list3_name;

        return $this;
    }

    /**
     * Gets number_type
     *
     * @return \Idealogic\RegistrationAPI\Model\NumberTypeDTO|null
     */
    public function getNumberType()
    {
        return $this->container['number_type'];
    }

    /**
     * Sets number_type
     *
     * @param \Idealogic\RegistrationAPI\Model\NumberTypeDTO|null $number_type number_type
     *
     * @return self
     */
    public function setNumberType($number_type)
    {
        if (is_null($number_type)) {
            throw new \InvalidArgumentException('non-nullable number_type cannot be null');
        }
        $this->container['number_type'] = $number_type;

        return $this;
    }

    /**
     * Gets tag_type
     *
     * @return \Idealogic\RegistrationAPI\Model\TagTypeDTO|null
     */
    public function getTagType()
    {
        return $this->container['tag_type'];
    }

    /**
     * Sets tag_type
     *
     * @param \Idealogic\RegistrationAPI\Model\TagTypeDTO|null $tag_type tag_type
     *
     * @return self
     */
    public function setTagType($tag_type)
    {
        if (is_null($tag_type)) {
            throw new \InvalidArgumentException('non-nullable tag_type cannot be null');
        }
        $this->container['tag_type'] = $tag_type;

        return $this;
    }

    /**
     * Gets sanctioning_organisation
     *
     * @return \Idealogic\RegistrationAPI\Model\OrganisationDTO
     */
    public function getSanctioningOrganisation()
    {
        return $this->container['sanctioning_organisation'];
    }

    /**
     * Sets sanctioning_organisation
     *
     * @param \Idealogic\RegistrationAPI\Model\OrganisationDTO $sanctioning_organisation sanctioning_organisation
     *
     * @return self
     */
    public function setSanctioningOrganisation($sanctioning_organisation)
    {
        if (is_null($sanctioning_organisation)) {
            throw new \InvalidArgumentException('non-nullable sanctioning_organisation cannot be null');
        }
        $this->container['sanctioning_organisation'] = $sanctioning_organisation;

        return $this;
    }

    /**
     * Gets organiser
     *
     * @return \Idealogic\RegistrationAPI\Model\OrganisationDTO
     */
    public function getOrganiser()
    {
        return $this->container['organiser'];
    }

    /**
     * Sets organiser
     *
     * @param \Idealogic\RegistrationAPI\Model\OrganisationDTO $organiser organiser
     *
     * @return self
     */
    public function setOrganiser($organiser)
    {
        if (is_null($organiser)) {
            throw new \InvalidArgumentException('non-nullable organiser cannot be null');
        }
        $this->container['organiser'] = $organiser;

        return $this;
    }

    /**
     * Gets series_product_default
     *
     * @return \Idealogic\RegistrationAPI\Model\ProductDTO|null
     */
    public function getSeriesProductDefault()
    {
        return $this->container['series_product_default'];
    }

    /**
     * Sets series_product_default
     *
     * @param \Idealogic\RegistrationAPI\Model\ProductDTO|null $series_product_default series_product_default
     *
     * @return self
     */
    public function setSeriesProductDefault($series_product_default)
    {
        if (is_null($series_product_default)) {
            throw new \InvalidArgumentException('non-nullable series_product_default cannot be null');
        }
        $this->container['series_product_default'] = $series_product_default;

        return $this;
    }

    /**
     * Gets product_default
     *
     * @return \Idealogic\RegistrationAPI\Model\ProductDTO|null
     */
    public function getProductDefault()
    {
        return $this->container['product_default'];
    }

    /**
     * Sets product_default
     *
     * @param \Idealogic\RegistrationAPI\Model\ProductDTO|null $product_default product_default
     *
     * @return self
     */
    public function setProductDefault($product_default)
    {
        if (is_null($product_default)) {
            throw new \InvalidArgumentException('non-nullable product_default cannot be null');
        }
        $this->container['product_default'] = $product_default;

        return $this;
    }

    /**
     * Gets product_number_add
     *
     * @return \Idealogic\RegistrationAPI\Model\ProductDTO|null
     */
    public function getProductNumberAdd()
    {
        return $this->container['product_number_add'];
    }

    /**
     * Sets product_number_add
     *
     * @param \Idealogic\RegistrationAPI\Model\ProductDTO|null $product_number_add product_number_add
     *
     * @return self
     */
    public function setProductNumberAdd($product_number_add)
    {
        if (is_null($product_number_add)) {
            throw new \InvalidArgumentException('non-nullable product_number_add cannot be null');
        }
        $this->container['product_number_add'] = $product_number_add;

        return $this;
    }

    /**
     * Gets product_number_first
     *
     * @return \Idealogic\RegistrationAPI\Model\ProductDTO|null
     */
    public function getProductNumberFirst()
    {
        return $this->container['product_number_first'];
    }

    /**
     * Sets product_number_first
     *
     * @param \Idealogic\RegistrationAPI\Model\ProductDTO|null $product_number_first product_number_first
     *
     * @return self
     */
    public function setProductNumberFirst($product_number_first)
    {
        if (is_null($product_number_first)) {
            throw new \InvalidArgumentException('non-nullable product_number_first cannot be null');
        }
        $this->container['product_number_first'] = $product_number_first;

        return $this;
    }

    /**
     * Gets product_tag_add
     *
     * @return \Idealogic\RegistrationAPI\Model\ProductDTO|null
     */
    public function getProductTagAdd()
    {
        return $this->container['product_tag_add'];
    }

    /**
     * Sets product_tag_add
     *
     * @param \Idealogic\RegistrationAPI\Model\ProductDTO|null $product_tag_add product_tag_add
     *
     * @return self
     */
    public function setProductTagAdd($product_tag_add)
    {
        if (is_null($product_tag_add)) {
            throw new \InvalidArgumentException('non-nullable product_tag_add cannot be null');
        }
        $this->container['product_tag_add'] = $product_tag_add;

        return $this;
    }

    /**
     * Gets product_tag_first
     *
     * @return \Idealogic\RegistrationAPI\Model\ProductDTO|null
     */
    public function getProductTagFirst()
    {
        return $this->container['product_tag_first'];
    }

    /**
     * Sets product_tag_first
     *
     * @param \Idealogic\RegistrationAPI\Model\ProductDTO|null $product_tag_first product_tag_first
     *
     * @return self
     */
    public function setProductTagFirst($product_tag_first)
    {
        if (is_null($product_tag_first)) {
            throw new \InvalidArgumentException('non-nullable product_tag_first cannot be null');
        }
        $this->container['product_tag_first'] = $product_tag_first;

        return $this;
    }

    /**
     * Gets custom_list1
     *
     * @return \Idealogic\RegistrationAPI\Model\CustomListDTO|null
     */
    public function getCustomList1()
    {
        return $this->container['custom_list1'];
    }

    /**
     * Sets custom_list1
     *
     * @param \Idealogic\RegistrationAPI\Model\CustomListDTO|null $custom_list1 custom_list1
     *
     * @return self
     */
    public function setCustomList1($custom_list1)
    {
        if (is_null($custom_list1)) {
            throw new \InvalidArgumentException('non-nullable custom_list1 cannot be null');
        }
        $this->container['custom_list1'] = $custom_list1;

        return $this;
    }

    /**
     * Gets custom_list2
     *
     * @return \Idealogic\RegistrationAPI\Model\CustomListDTO|null
     */
    public function getCustomList2()
    {
        return $this->container['custom_list2'];
    }

    /**
     * Sets custom_list2
     *
     * @param \Idealogic\RegistrationAPI\Model\CustomListDTO|null $custom_list2 custom_list2
     *
     * @return self
     */
    public function setCustomList2($custom_list2)
    {
        if (is_null($custom_list2)) {
            throw new \InvalidArgumentException('non-nullable custom_list2 cannot be null');
        }
        $this->container['custom_list2'] = $custom_list2;

        return $this;
    }

    /**
     * Gets custom_list3
     *
     * @return \Idealogic\RegistrationAPI\Model\CustomListDTO|null
     */
    public function getCustomList3()
    {
        return $this->container['custom_list3'];
    }

    /**
     * Sets custom_list3
     *
     * @param \Idealogic\RegistrationAPI\Model\CustomListDTO|null $custom_list3 custom_list3
     *
     * @return self
     */
    public function setCustomList3($custom_list3)
    {
        if (is_null($custom_list3)) {
            throw new \InvalidArgumentException('non-nullable custom_list3 cannot be null');
        }
        $this->container['custom_list3'] = $custom_list3;

        return $this;
    }

    /**
     * Gets enrol_process
     *
     * @return \Idealogic\RegistrationAPI\Model\ProcessDefinitionDTO|null
     */
    public function getEnrolProcess()
    {
        return $this->container['enrol_process'];
    }

    /**
     * Sets enrol_process
     *
     * @param \Idealogic\RegistrationAPI\Model\ProcessDefinitionDTO|null $enrol_process enrol_process
     *
     * @return self
     */
    public function setEnrolProcess($enrol_process)
    {
        if (is_null($enrol_process)) {
            throw new \InvalidArgumentException('non-nullable enrol_process cannot be null');
        }
        $this->container['enrol_process'] = $enrol_process;

        return $this;
    }

    /**
     * Gets disciplines
     *
     * @return \Idealogic\RegistrationAPI\Model\DisciplineDTO[]|null
     */
    public function getDisciplines()
    {
        return $this->container['disciplines'];
    }

    /**
     * Sets disciplines
     *
     * @param \Idealogic\RegistrationAPI\Model\DisciplineDTO[]|null $disciplines Disciplines used by the series.
     *
     * @return self
     */
    public function setDisciplines($disciplines)
    {
        if (is_null($disciplines)) {
            throw new \InvalidArgumentException('non-nullable disciplines cannot be null');
        }


        $this->container['disciplines'] = $disciplines;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


