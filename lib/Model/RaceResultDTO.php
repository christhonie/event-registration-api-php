<?php
/**
 * RaceResultDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Idealogic\RegistrationAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Idealogic Event and Member Admin Service API
 *
 * Adminstrative services for managing events and members
 *
 * The version of the OpenAPI document: 2.2.0-SNAPSHOT
 * Contact: development@idealogic.co.za
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Idealogic\RegistrationAPI\Model;

use \ArrayAccess;
use \Idealogic\RegistrationAPI\ObjectSerializer;

/**
 * RaceResultDTO Class Doc Comment
 *
 * @category Class
 * @description Final and consolidated result outcome for a race. In races with multiple start groups and/or rounds, this entity represents the final outcome for the race.
 * @package  Idealogic\RegistrationAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RaceResultDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RaceResultDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'position' => 'int',
        'duration_milli_second' => 'int',
        'laps' => 'int',
        'points' => 'int',
        'status' => 'string',
        'person' => '\Idealogic\RegistrationAPI\Model\PersonNameDTO',
        'event_participant' => '\Idealogic\RegistrationAPI\Model\EventParticipantDTO',
        'start_group_participant' => '\Idealogic\RegistrationAPI\Model\StartGroupParticipantDTO',
        'custom1' => '\Idealogic\RegistrationAPI\Model\CustomListValueDTO',
        'custom2' => '\Idealogic\RegistrationAPI\Model\CustomListValueDTO',
        'custom3' => '\Idealogic\RegistrationAPI\Model\CustomListValueDTO',
        'result_set' => '\Idealogic\RegistrationAPI\Model\ResultSetDTO'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'position' => 'int32',
        'duration_milli_second' => 'int64',
        'laps' => 'int32',
        'points' => 'int32',
        'status' => null,
        'person' => null,
        'event_participant' => null,
        'start_group_participant' => null,
        'custom1' => null,
        'custom2' => null,
        'custom3' => null,
        'result_set' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'position' => false,
        'duration_milli_second' => false,
        'laps' => false,
        'points' => false,
        'status' => false,
        'person' => false,
        'event_participant' => false,
        'start_group_participant' => false,
        'custom1' => false,
        'custom2' => false,
        'custom3' => false,
        'result_set' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'position' => 'position',
        'duration_milli_second' => 'durationMilliSecond',
        'laps' => 'laps',
        'points' => 'points',
        'status' => 'status',
        'person' => 'person',
        'event_participant' => 'eventParticipant',
        'start_group_participant' => 'startGroupParticipant',
        'custom1' => 'custom1',
        'custom2' => 'custom2',
        'custom3' => 'custom3',
        'result_set' => 'resultSet'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'position' => 'setPosition',
        'duration_milli_second' => 'setDurationMilliSecond',
        'laps' => 'setLaps',
        'points' => 'setPoints',
        'status' => 'setStatus',
        'person' => 'setPerson',
        'event_participant' => 'setEventParticipant',
        'start_group_participant' => 'setStartGroupParticipant',
        'custom1' => 'setCustom1',
        'custom2' => 'setCustom2',
        'custom3' => 'setCustom3',
        'result_set' => 'setResultSet'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'position' => 'getPosition',
        'duration_milli_second' => 'getDurationMilliSecond',
        'laps' => 'getLaps',
        'points' => 'getPoints',
        'status' => 'getStatus',
        'person' => 'getPerson',
        'event_participant' => 'getEventParticipant',
        'start_group_participant' => 'getStartGroupParticipant',
        'custom1' => 'getCustom1',
        'custom2' => 'getCustom2',
        'custom3' => 'getCustom3',
        'result_set' => 'getResultSet'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_FINISHED = 'FINISHED';
    public const STATUS_DID_NOT_START = 'DID_NOT_START';
    public const STATUS_DID_NOT_FINISH = 'DID_NOT_FINISH';
    public const STATUS_RELEGATED = 'RELEGATED';
    public const STATUS_DISQUALIFIED = 'DISQUALIFIED';
    public const STATUS_LAPPED = 'LAPPED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_FINISHED,
            self::STATUS_DID_NOT_START,
            self::STATUS_DID_NOT_FINISH,
            self::STATUS_RELEGATED,
            self::STATUS_DISQUALIFIED,
            self::STATUS_LAPPED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('duration_milli_second', $data ?? [], null);
        $this->setIfExists('laps', $data ?? [], null);
        $this->setIfExists('points', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('person', $data ?? [], null);
        $this->setIfExists('event_participant', $data ?? [], null);
        $this->setIfExists('start_group_participant', $data ?? [], null);
        $this->setIfExists('custom1', $data ?? [], null);
        $this->setIfExists('custom2', $data ?? [], null);
        $this->setIfExists('custom3', $data ?? [], null);
        $this->setIfExists('result_set', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['result_set'] === null) {
            $invalidProperties[] = "'result_set' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position Position in the race. First place will be 1, followed by second as 2, etc.
     *
     * @return self
     */
    public function setPosition($position)
    {
        if (is_null($position)) {
            throw new \InvalidArgumentException('non-nullable position cannot be null');
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets duration_milli_second
     *
     * @return int|null
     */
    public function getDurationMilliSecond()
    {
        return $this->container['duration_milli_second'];
    }

    /**
     * Sets duration_milli_second
     *
     * @param int|null $duration_milli_second For duration based outcomes this indicates the duration underpinning the result.
     *
     * @return self
     */
    public function setDurationMilliSecond($duration_milli_second)
    {
        if (is_null($duration_milli_second)) {
            throw new \InvalidArgumentException('non-nullable duration_milli_second cannot be null');
        }
        $this->container['duration_milli_second'] = $duration_milli_second;

        return $this;
    }

    /**
     * Gets laps
     *
     * @return int|null
     */
    public function getLaps()
    {
        return $this->container['laps'];
    }

    /**
     * Sets laps
     *
     * @param int|null $laps Number of laps completed. Optional.
     *
     * @return self
     */
    public function setLaps($laps)
    {
        if (is_null($laps)) {
            throw new \InvalidArgumentException('non-nullable laps cannot be null');
        }
        $this->container['laps'] = $laps;

        return $this;
    }

    /**
     * Gets points
     *
     * @return int|null
     */
    public function getPoints()
    {
        return $this->container['points'];
    }

    /**
     * Sets points
     *
     * @param int|null $points For points based outcomes this indicates the points underpinning the result.
     *
     * @return self
     */
    public function setPoints($points)
    {
        if (is_null($points)) {
            throw new \InvalidArgumentException('non-nullable points cannot be null');
        }
        $this->container['points'] = $points;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets person
     *
     * @return \Idealogic\RegistrationAPI\Model\PersonNameDTO|null
     */
    public function getPerson()
    {
        return $this->container['person'];
    }

    /**
     * Sets person
     *
     * @param \Idealogic\RegistrationAPI\Model\PersonNameDTO|null $person person
     *
     * @return self
     */
    public function setPerson($person)
    {
        if (is_null($person)) {
            throw new \InvalidArgumentException('non-nullable person cannot be null');
        }
        $this->container['person'] = $person;

        return $this;
    }

    /**
     * Gets event_participant
     *
     * @return \Idealogic\RegistrationAPI\Model\EventParticipantDTO|null
     */
    public function getEventParticipant()
    {
        return $this->container['event_participant'];
    }

    /**
     * Sets event_participant
     *
     * @param \Idealogic\RegistrationAPI\Model\EventParticipantDTO|null $event_participant event_participant
     *
     * @return self
     */
    public function setEventParticipant($event_participant)
    {
        if (is_null($event_participant)) {
            throw new \InvalidArgumentException('non-nullable event_participant cannot be null');
        }
        $this->container['event_participant'] = $event_participant;

        return $this;
    }

    /**
     * Gets start_group_participant
     *
     * @return \Idealogic\RegistrationAPI\Model\StartGroupParticipantDTO|null
     */
    public function getStartGroupParticipant()
    {
        return $this->container['start_group_participant'];
    }

    /**
     * Sets start_group_participant
     *
     * @param \Idealogic\RegistrationAPI\Model\StartGroupParticipantDTO|null $start_group_participant start_group_participant
     *
     * @return self
     */
    public function setStartGroupParticipant($start_group_participant)
    {
        if (is_null($start_group_participant)) {
            throw new \InvalidArgumentException('non-nullable start_group_participant cannot be null');
        }
        $this->container['start_group_participant'] = $start_group_participant;

        return $this;
    }

    /**
     * Gets custom1
     *
     * @return \Idealogic\RegistrationAPI\Model\CustomListValueDTO|null
     */
    public function getCustom1()
    {
        return $this->container['custom1'];
    }

    /**
     * Sets custom1
     *
     * @param \Idealogic\RegistrationAPI\Model\CustomListValueDTO|null $custom1 custom1
     *
     * @return self
     */
    public function setCustom1($custom1)
    {
        if (is_null($custom1)) {
            throw new \InvalidArgumentException('non-nullable custom1 cannot be null');
        }
        $this->container['custom1'] = $custom1;

        return $this;
    }

    /**
     * Gets custom2
     *
     * @return \Idealogic\RegistrationAPI\Model\CustomListValueDTO|null
     */
    public function getCustom2()
    {
        return $this->container['custom2'];
    }

    /**
     * Sets custom2
     *
     * @param \Idealogic\RegistrationAPI\Model\CustomListValueDTO|null $custom2 custom2
     *
     * @return self
     */
    public function setCustom2($custom2)
    {
        if (is_null($custom2)) {
            throw new \InvalidArgumentException('non-nullable custom2 cannot be null');
        }
        $this->container['custom2'] = $custom2;

        return $this;
    }

    /**
     * Gets custom3
     *
     * @return \Idealogic\RegistrationAPI\Model\CustomListValueDTO|null
     */
    public function getCustom3()
    {
        return $this->container['custom3'];
    }

    /**
     * Sets custom3
     *
     * @param \Idealogic\RegistrationAPI\Model\CustomListValueDTO|null $custom3 custom3
     *
     * @return self
     */
    public function setCustom3($custom3)
    {
        if (is_null($custom3)) {
            throw new \InvalidArgumentException('non-nullable custom3 cannot be null');
        }
        $this->container['custom3'] = $custom3;

        return $this;
    }

    /**
     * Gets result_set
     *
     * @return \Idealogic\RegistrationAPI\Model\ResultSetDTO
     */
    public function getResultSet()
    {
        return $this->container['result_set'];
    }

    /**
     * Sets result_set
     *
     * @param \Idealogic\RegistrationAPI\Model\ResultSetDTO $result_set result_set
     *
     * @return self
     */
    public function setResultSet($result_set)
    {
        if (is_null($result_set)) {
            throw new \InvalidArgumentException('non-nullable result_set cannot be null');
        }
        $this->container['result_set'] = $result_set;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


