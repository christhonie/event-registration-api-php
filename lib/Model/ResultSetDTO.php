<?php
/**
 * ResultSetDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Idealogic\RegistrationAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Idealogic Event and Member Admin Service API
 *
 * Adminstrative services for managing events and members
 *
 * The version of the OpenAPI document: 2.2.0-SNAPSHOT
 * Contact: development@idealogic.co.za
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Idealogic\RegistrationAPI\Model;

use \ArrayAccess;
use \Idealogic\RegistrationAPI\ObjectSerializer;

/**
 * ResultSetDTO Class Doc Comment
 *
 * @category Class
 * @description Group related race results under one collection, allowing state management and versioning.
 * @package  Idealogic\RegistrationAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResultSetDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ResultSetDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'state' => 'string',
        'active' => 'bool',
        'gender' => 'string',
        'approved_by' => 'string',
        'approved_on' => '\DateTime',
        'custom_list1_name' => 'string',
        'custom_list2_name' => 'string',
        'custom_list3_name' => 'string',
        'last_update' => '\DateTime',
        'replaces' => '\Idealogic\RegistrationAPI\Model\ResultSetDTO',
        'series' => '\Idealogic\RegistrationAPI\Model\SeriesDTO',
        'event' => '\Idealogic\RegistrationAPI\Model\EventDTO',
        'event_category' => '\Idealogic\RegistrationAPI\Model\EventCategoryDTO',
        'race' => '\Idealogic\RegistrationAPI\Model\RaceDTO',
        'start_group' => '\Idealogic\RegistrationAPI\Model\StartGroupDTO',
        'custom_list1' => '\Idealogic\RegistrationAPI\Model\CustomListDTO',
        'custom_list2' => '\Idealogic\RegistrationAPI\Model\CustomListDTO',
        'custom_list3' => '\Idealogic\RegistrationAPI\Model\CustomListDTO'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'state' => null,
        'active' => null,
        'gender' => null,
        'approved_by' => null,
        'approved_on' => 'date-time',
        'custom_list1_name' => null,
        'custom_list2_name' => null,
        'custom_list3_name' => null,
        'last_update' => 'date-time',
        'replaces' => null,
        'series' => null,
        'event' => null,
        'event_category' => null,
        'race' => null,
        'start_group' => null,
        'custom_list1' => null,
        'custom_list2' => null,
        'custom_list3' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'state' => false,
        'active' => false,
        'gender' => false,
        'approved_by' => false,
        'approved_on' => false,
        'custom_list1_name' => false,
        'custom_list2_name' => false,
        'custom_list3_name' => false,
        'last_update' => false,
        'replaces' => false,
        'series' => false,
        'event' => false,
        'event_category' => false,
        'race' => false,
        'start_group' => false,
        'custom_list1' => false,
        'custom_list2' => false,
        'custom_list3' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'state' => 'state',
        'active' => 'active',
        'gender' => 'gender',
        'approved_by' => 'approvedBy',
        'approved_on' => 'approvedOn',
        'custom_list1_name' => 'customList1Name',
        'custom_list2_name' => 'customList2Name',
        'custom_list3_name' => 'customList3Name',
        'last_update' => 'lastUpdate',
        'replaces' => 'replaces',
        'series' => 'series',
        'event' => 'event',
        'event_category' => 'eventCategory',
        'race' => 'race',
        'start_group' => 'startGroup',
        'custom_list1' => 'customList1',
        'custom_list2' => 'customList2',
        'custom_list3' => 'customList3'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'state' => 'setState',
        'active' => 'setActive',
        'gender' => 'setGender',
        'approved_by' => 'setApprovedBy',
        'approved_on' => 'setApprovedOn',
        'custom_list1_name' => 'setCustomList1Name',
        'custom_list2_name' => 'setCustomList2Name',
        'custom_list3_name' => 'setCustomList3Name',
        'last_update' => 'setLastUpdate',
        'replaces' => 'setReplaces',
        'series' => 'setSeries',
        'event' => 'setEvent',
        'event_category' => 'setEventCategory',
        'race' => 'setRace',
        'start_group' => 'setStartGroup',
        'custom_list1' => 'setCustomList1',
        'custom_list2' => 'setCustomList2',
        'custom_list3' => 'setCustomList3'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'state' => 'getState',
        'active' => 'getActive',
        'gender' => 'getGender',
        'approved_by' => 'getApprovedBy',
        'approved_on' => 'getApprovedOn',
        'custom_list1_name' => 'getCustomList1Name',
        'custom_list2_name' => 'getCustomList2Name',
        'custom_list3_name' => 'getCustomList3Name',
        'last_update' => 'getLastUpdate',
        'replaces' => 'getReplaces',
        'series' => 'getSeries',
        'event' => 'getEvent',
        'event_category' => 'getEventCategory',
        'race' => 'getRace',
        'start_group' => 'getStartGroup',
        'custom_list1' => 'getCustomList1',
        'custom_list2' => 'getCustomList2',
        'custom_list3' => 'getCustomList3'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATE_DRAFT = 'DRAFT';
    public const STATE_PROVISIONAL = 'PROVISIONAL';
    public const STATE_APPROVED = 'APPROVED';
    public const STATE_REPLACED = 'REPLACED';
    public const STATE_DELETED = 'DELETED';
    public const GENDER_UNKNOWN = 'UNKNOWN';
    public const GENDER_MALE = 'MALE';
    public const GENDER_FEMALE = 'FEMALE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_DRAFT,
            self::STATE_PROVISIONAL,
            self::STATE_APPROVED,
            self::STATE_REPLACED,
            self::STATE_DELETED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_UNKNOWN,
            self::GENDER_MALE,
            self::GENDER_FEMALE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('approved_by', $data ?? [], null);
        $this->setIfExists('approved_on', $data ?? [], null);
        $this->setIfExists('custom_list1_name', $data ?? [], null);
        $this->setIfExists('custom_list2_name', $data ?? [], null);
        $this->setIfExists('custom_list3_name', $data ?? [], null);
        $this->setIfExists('last_update', $data ?? [], null);
        $this->setIfExists('replaces', $data ?? [], null);
        $this->setIfExists('series', $data ?? [], null);
        $this->setIfExists('event', $data ?? [], null);
        $this->setIfExists('event_category', $data ?? [], null);
        $this->setIfExists('race', $data ?? [], null);
        $this->setIfExists('start_group', $data ?? [], null);
        $this->setIfExists('custom_list1', $data ?? [], null);
        $this->setIfExists('custom_list2', $data ?? [], null);
        $this->setIfExists('custom_list3', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gender', must be one of '%s'",
                $this->container['gender'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['approved_by']) && (mb_strlen($this->container['approved_by']) > 50)) {
            $invalidProperties[] = "invalid value for 'approved_by', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['approved_by']) && (mb_strlen($this->container['approved_by']) < 0)) {
            $invalidProperties[] = "invalid value for 'approved_by', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['custom_list1_name']) && (mb_strlen($this->container['custom_list1_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_list1_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_list1_name']) && (mb_strlen($this->container['custom_list1_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'custom_list1_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['custom_list2_name']) && (mb_strlen($this->container['custom_list2_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_list2_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_list2_name']) && (mb_strlen($this->container['custom_list2_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'custom_list2_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['custom_list3_name']) && (mb_strlen($this->container['custom_list3_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_list3_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_list3_name']) && (mb_strlen($this->container['custom_list3_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'custom_list3_name', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ResultSetDTO., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ResultSetDTO., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $allowedValues = $this->getGenderAllowableValues();
        if (!in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gender', must be one of '%s'",
                    $gender,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets approved_by
     *
     * @return string|null
     */
    public function getApprovedBy()
    {
        return $this->container['approved_by'];
    }

    /**
     * Sets approved_by
     *
     * @param string|null $approved_by approved_by
     *
     * @return self
     */
    public function setApprovedBy($approved_by)
    {
        if (is_null($approved_by)) {
            throw new \InvalidArgumentException('non-nullable approved_by cannot be null');
        }
        if ((mb_strlen($approved_by) > 50)) {
            throw new \InvalidArgumentException('invalid length for $approved_by when calling ResultSetDTO., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($approved_by) < 0)) {
            throw new \InvalidArgumentException('invalid length for $approved_by when calling ResultSetDTO., must be bigger than or equal to 0.');
        }

        $this->container['approved_by'] = $approved_by;

        return $this;
    }

    /**
     * Gets approved_on
     *
     * @return \DateTime|null
     */
    public function getApprovedOn()
    {
        return $this->container['approved_on'];
    }

    /**
     * Sets approved_on
     *
     * @param \DateTime|null $approved_on approved_on
     *
     * @return self
     */
    public function setApprovedOn($approved_on)
    {
        if (is_null($approved_on)) {
            throw new \InvalidArgumentException('non-nullable approved_on cannot be null');
        }
        $this->container['approved_on'] = $approved_on;

        return $this;
    }

    /**
     * Gets custom_list1_name
     *
     * @return string|null
     */
    public function getCustomList1Name()
    {
        return $this->container['custom_list1_name'];
    }

    /**
     * Sets custom_list1_name
     *
     * @param string|null $custom_list1_name custom_list1_name
     *
     * @return self
     */
    public function setCustomList1Name($custom_list1_name)
    {
        if (is_null($custom_list1_name)) {
            throw new \InvalidArgumentException('non-nullable custom_list1_name cannot be null');
        }
        if ((mb_strlen($custom_list1_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_list1_name when calling ResultSetDTO., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($custom_list1_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $custom_list1_name when calling ResultSetDTO., must be bigger than or equal to 0.');
        }

        $this->container['custom_list1_name'] = $custom_list1_name;

        return $this;
    }

    /**
     * Gets custom_list2_name
     *
     * @return string|null
     */
    public function getCustomList2Name()
    {
        return $this->container['custom_list2_name'];
    }

    /**
     * Sets custom_list2_name
     *
     * @param string|null $custom_list2_name custom_list2_name
     *
     * @return self
     */
    public function setCustomList2Name($custom_list2_name)
    {
        if (is_null($custom_list2_name)) {
            throw new \InvalidArgumentException('non-nullable custom_list2_name cannot be null');
        }
        if ((mb_strlen($custom_list2_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_list2_name when calling ResultSetDTO., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($custom_list2_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $custom_list2_name when calling ResultSetDTO., must be bigger than or equal to 0.');
        }

        $this->container['custom_list2_name'] = $custom_list2_name;

        return $this;
    }

    /**
     * Gets custom_list3_name
     *
     * @return string|null
     */
    public function getCustomList3Name()
    {
        return $this->container['custom_list3_name'];
    }

    /**
     * Sets custom_list3_name
     *
     * @param string|null $custom_list3_name custom_list3_name
     *
     * @return self
     */
    public function setCustomList3Name($custom_list3_name)
    {
        if (is_null($custom_list3_name)) {
            throw new \InvalidArgumentException('non-nullable custom_list3_name cannot be null');
        }
        if ((mb_strlen($custom_list3_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_list3_name when calling ResultSetDTO., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($custom_list3_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $custom_list3_name when calling ResultSetDTO., must be bigger than or equal to 0.');
        }

        $this->container['custom_list3_name'] = $custom_list3_name;

        return $this;
    }

    /**
     * Gets last_update
     *
     * @return \DateTime|null
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     *
     * @param \DateTime|null $last_update last_update
     *
     * @return self
     */
    public function setLastUpdate($last_update)
    {
        if (is_null($last_update)) {
            throw new \InvalidArgumentException('non-nullable last_update cannot be null');
        }
        $this->container['last_update'] = $last_update;

        return $this;
    }

    /**
     * Gets replaces
     *
     * @return \Idealogic\RegistrationAPI\Model\ResultSetDTO|null
     */
    public function getReplaces()
    {
        return $this->container['replaces'];
    }

    /**
     * Sets replaces
     *
     * @param \Idealogic\RegistrationAPI\Model\ResultSetDTO|null $replaces replaces
     *
     * @return self
     */
    public function setReplaces($replaces)
    {
        if (is_null($replaces)) {
            throw new \InvalidArgumentException('non-nullable replaces cannot be null');
        }
        $this->container['replaces'] = $replaces;

        return $this;
    }

    /**
     * Gets series
     *
     * @return \Idealogic\RegistrationAPI\Model\SeriesDTO|null
     */
    public function getSeries()
    {
        return $this->container['series'];
    }

    /**
     * Sets series
     *
     * @param \Idealogic\RegistrationAPI\Model\SeriesDTO|null $series series
     *
     * @return self
     */
    public function setSeries($series)
    {
        if (is_null($series)) {
            throw new \InvalidArgumentException('non-nullable series cannot be null');
        }
        $this->container['series'] = $series;

        return $this;
    }

    /**
     * Gets event
     *
     * @return \Idealogic\RegistrationAPI\Model\EventDTO|null
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param \Idealogic\RegistrationAPI\Model\EventDTO|null $event event
     *
     * @return self
     */
    public function setEvent($event)
    {
        if (is_null($event)) {
            throw new \InvalidArgumentException('non-nullable event cannot be null');
        }
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets event_category
     *
     * @return \Idealogic\RegistrationAPI\Model\EventCategoryDTO|null
     */
    public function getEventCategory()
    {
        return $this->container['event_category'];
    }

    /**
     * Sets event_category
     *
     * @param \Idealogic\RegistrationAPI\Model\EventCategoryDTO|null $event_category event_category
     *
     * @return self
     */
    public function setEventCategory($event_category)
    {
        if (is_null($event_category)) {
            throw new \InvalidArgumentException('non-nullable event_category cannot be null');
        }
        $this->container['event_category'] = $event_category;

        return $this;
    }

    /**
     * Gets race
     *
     * @return \Idealogic\RegistrationAPI\Model\RaceDTO|null
     */
    public function getRace()
    {
        return $this->container['race'];
    }

    /**
     * Sets race
     *
     * @param \Idealogic\RegistrationAPI\Model\RaceDTO|null $race race
     *
     * @return self
     */
    public function setRace($race)
    {
        if (is_null($race)) {
            throw new \InvalidArgumentException('non-nullable race cannot be null');
        }
        $this->container['race'] = $race;

        return $this;
    }

    /**
     * Gets start_group
     *
     * @return \Idealogic\RegistrationAPI\Model\StartGroupDTO|null
     */
    public function getStartGroup()
    {
        return $this->container['start_group'];
    }

    /**
     * Sets start_group
     *
     * @param \Idealogic\RegistrationAPI\Model\StartGroupDTO|null $start_group start_group
     *
     * @return self
     */
    public function setStartGroup($start_group)
    {
        if (is_null($start_group)) {
            throw new \InvalidArgumentException('non-nullable start_group cannot be null');
        }
        $this->container['start_group'] = $start_group;

        return $this;
    }

    /**
     * Gets custom_list1
     *
     * @return \Idealogic\RegistrationAPI\Model\CustomListDTO|null
     */
    public function getCustomList1()
    {
        return $this->container['custom_list1'];
    }

    /**
     * Sets custom_list1
     *
     * @param \Idealogic\RegistrationAPI\Model\CustomListDTO|null $custom_list1 custom_list1
     *
     * @return self
     */
    public function setCustomList1($custom_list1)
    {
        if (is_null($custom_list1)) {
            throw new \InvalidArgumentException('non-nullable custom_list1 cannot be null');
        }
        $this->container['custom_list1'] = $custom_list1;

        return $this;
    }

    /**
     * Gets custom_list2
     *
     * @return \Idealogic\RegistrationAPI\Model\CustomListDTO|null
     */
    public function getCustomList2()
    {
        return $this->container['custom_list2'];
    }

    /**
     * Sets custom_list2
     *
     * @param \Idealogic\RegistrationAPI\Model\CustomListDTO|null $custom_list2 custom_list2
     *
     * @return self
     */
    public function setCustomList2($custom_list2)
    {
        if (is_null($custom_list2)) {
            throw new \InvalidArgumentException('non-nullable custom_list2 cannot be null');
        }
        $this->container['custom_list2'] = $custom_list2;

        return $this;
    }

    /**
     * Gets custom_list3
     *
     * @return \Idealogic\RegistrationAPI\Model\CustomListDTO|null
     */
    public function getCustomList3()
    {
        return $this->container['custom_list3'];
    }

    /**
     * Sets custom_list3
     *
     * @param \Idealogic\RegistrationAPI\Model\CustomListDTO|null $custom_list3 custom_list3
     *
     * @return self
     */
    public function setCustomList3($custom_list3)
    {
        if (is_null($custom_list3)) {
            throw new \InvalidArgumentException('non-nullable custom_list3 cannot be null');
        }
        $this->container['custom_list3'] = $custom_list3;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


