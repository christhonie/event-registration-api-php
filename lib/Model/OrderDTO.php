<?php
/**
 * OrderDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Idealogic\RegistrationAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Idealogic Event and Member Admin Service API
 *
 * Adminstrative services for managing events and members
 *
 * The version of the OpenAPI document: 2.2.0-SNAPSHOT
 * Contact: development@idealogic.co.za
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Idealogic\RegistrationAPI\Model;

use \ArrayAccess;
use \Idealogic\RegistrationAPI\ObjectSerializer;

/**
 * OrderDTO Class Doc Comment
 *
 * @category Class
 * @package  Idealogic\RegistrationAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'number' => 'string',
        'external_id' => 'string',
        'status' => 'string',
        'email' => 'string',
        'url' => 'string',
        'transaction_date_time' => '\DateTime',
        'payment_date_time' => '\DateTime',
        'cancel_date_time' => '\DateTime',
        'organisation' => '\Idealogic\RegistrationAPI\Model\OrganisationDTO',
        'buyer' => '\Idealogic\RegistrationAPI\Model\PersonNameDTO',
        'registration_system' => '\Idealogic\RegistrationAPI\Model\RegistrationSystemDTO',
        'payment_processor' => '\Idealogic\RegistrationAPI\Model\PaymentProcessorDTO'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'number' => null,
        'external_id' => null,
        'status' => null,
        'email' => null,
        'url' => null,
        'transaction_date_time' => 'date-time',
        'payment_date_time' => 'date-time',
        'cancel_date_time' => 'date-time',
        'organisation' => null,
        'buyer' => null,
        'registration_system' => null,
        'payment_processor' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'number' => false,
        'external_id' => false,
        'status' => false,
        'email' => false,
        'url' => false,
        'transaction_date_time' => false,
        'payment_date_time' => false,
        'cancel_date_time' => false,
        'organisation' => false,
        'buyer' => false,
        'registration_system' => false,
        'payment_processor' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'number' => 'number',
        'external_id' => 'externalId',
        'status' => 'status',
        'email' => 'email',
        'url' => 'url',
        'transaction_date_time' => 'transactionDateTime',
        'payment_date_time' => 'paymentDateTime',
        'cancel_date_time' => 'cancelDateTime',
        'organisation' => 'organisation',
        'buyer' => 'buyer',
        'registration_system' => 'registrationSystem',
        'payment_processor' => 'paymentProcessor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'number' => 'setNumber',
        'external_id' => 'setExternalId',
        'status' => 'setStatus',
        'email' => 'setEmail',
        'url' => 'setUrl',
        'transaction_date_time' => 'setTransactionDateTime',
        'payment_date_time' => 'setPaymentDateTime',
        'cancel_date_time' => 'setCancelDateTime',
        'organisation' => 'setOrganisation',
        'buyer' => 'setBuyer',
        'registration_system' => 'setRegistrationSystem',
        'payment_processor' => 'setPaymentProcessor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'number' => 'getNumber',
        'external_id' => 'getExternalId',
        'status' => 'getStatus',
        'email' => 'getEmail',
        'url' => 'getUrl',
        'transaction_date_time' => 'getTransactionDateTime',
        'payment_date_time' => 'getPaymentDateTime',
        'cancel_date_time' => 'getCancelDateTime',
        'organisation' => 'getOrganisation',
        'buyer' => 'getBuyer',
        'registration_system' => 'getRegistrationSystem',
        'payment_processor' => 'getPaymentProcessor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_PENDING = 'PENDING';
    public const STATUS_PAID = 'PAID';
    public const STATUS_REFUNDED = 'REFUNDED';
    public const STATUS_CANCELLED = 'CANCELLED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PENDING,
            self::STATUS_PAID,
            self::STATUS_REFUNDED,
            self::STATUS_CANCELLED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('transaction_date_time', $data ?? [], null);
        $this->setIfExists('payment_date_time', $data ?? [], null);
        $this->setIfExists('cancel_date_time', $data ?? [], null);
        $this->setIfExists('organisation', $data ?? [], null);
        $this->setIfExists('buyer', $data ?? [], null);
        $this->setIfExists('registration_system', $data ?? [], null);
        $this->setIfExists('payment_processor', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ((mb_strlen($this->container['number']) > 12)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 12.";
        }

        if ((mb_strlen($this->container['number']) < 0)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['external_id']) && (mb_strlen($this->container['external_id']) > 32)) {
            $invalidProperties[] = "invalid value for 'external_id', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['external_id']) && (mb_strlen($this->container['external_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'external_id', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 100)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) < 0)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['url']) && (mb_strlen($this->container['url']) > 200)) {
            $invalidProperties[] = "invalid value for 'url', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['url']) && (mb_strlen($this->container['url']) < 0)) {
            $invalidProperties[] = "invalid value for 'url', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['transaction_date_time'] === null) {
            $invalidProperties[] = "'transaction_date_time' can't be null";
        }
        if ($this->container['organisation'] === null) {
            $invalidProperties[] = "'organisation' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        if ((mb_strlen($number) > 12)) {
            throw new \InvalidArgumentException('invalid length for $number when calling OrderDTO., must be smaller than or equal to 12.');
        }
        if ((mb_strlen($number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $number when calling OrderDTO., must be bigger than or equal to 0.');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id Foreign key to external order module
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        if ((mb_strlen($external_id) > 32)) {
            throw new \InvalidArgumentException('invalid length for $external_id when calling OrderDTO., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($external_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $external_id when calling OrderDTO., must be bigger than or equal to 0.');
        }

        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        if ((mb_strlen($email) > 100)) {
            throw new \InvalidArgumentException('invalid length for $email when calling OrderDTO., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($email) < 0)) {
            throw new \InvalidArgumentException('invalid length for $email when calling OrderDTO., must be bigger than or equal to 0.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        if ((mb_strlen($url) > 200)) {
            throw new \InvalidArgumentException('invalid length for $url when calling OrderDTO., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $url when calling OrderDTO., must be bigger than or equal to 0.');
        }

        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets transaction_date_time
     *
     * @return \DateTime
     */
    public function getTransactionDateTime()
    {
        return $this->container['transaction_date_time'];
    }

    /**
     * Sets transaction_date_time
     *
     * @param \DateTime $transaction_date_time transaction_date_time
     *
     * @return self
     */
    public function setTransactionDateTime($transaction_date_time)
    {
        if (is_null($transaction_date_time)) {
            throw new \InvalidArgumentException('non-nullable transaction_date_time cannot be null');
        }
        $this->container['transaction_date_time'] = $transaction_date_time;

        return $this;
    }

    /**
     * Gets payment_date_time
     *
     * @return \DateTime|null
     */
    public function getPaymentDateTime()
    {
        return $this->container['payment_date_time'];
    }

    /**
     * Sets payment_date_time
     *
     * @param \DateTime|null $payment_date_time payment_date_time
     *
     * @return self
     */
    public function setPaymentDateTime($payment_date_time)
    {
        if (is_null($payment_date_time)) {
            throw new \InvalidArgumentException('non-nullable payment_date_time cannot be null');
        }
        $this->container['payment_date_time'] = $payment_date_time;

        return $this;
    }

    /**
     * Gets cancel_date_time
     *
     * @return \DateTime|null
     */
    public function getCancelDateTime()
    {
        return $this->container['cancel_date_time'];
    }

    /**
     * Sets cancel_date_time
     *
     * @param \DateTime|null $cancel_date_time cancel_date_time
     *
     * @return self
     */
    public function setCancelDateTime($cancel_date_time)
    {
        if (is_null($cancel_date_time)) {
            throw new \InvalidArgumentException('non-nullable cancel_date_time cannot be null');
        }
        $this->container['cancel_date_time'] = $cancel_date_time;

        return $this;
    }

    /**
     * Gets organisation
     *
     * @return \Idealogic\RegistrationAPI\Model\OrganisationDTO
     */
    public function getOrganisation()
    {
        return $this->container['organisation'];
    }

    /**
     * Sets organisation
     *
     * @param \Idealogic\RegistrationAPI\Model\OrganisationDTO $organisation organisation
     *
     * @return self
     */
    public function setOrganisation($organisation)
    {
        if (is_null($organisation)) {
            throw new \InvalidArgumentException('non-nullable organisation cannot be null');
        }
        $this->container['organisation'] = $organisation;

        return $this;
    }

    /**
     * Gets buyer
     *
     * @return \Idealogic\RegistrationAPI\Model\PersonNameDTO|null
     */
    public function getBuyer()
    {
        return $this->container['buyer'];
    }

    /**
     * Sets buyer
     *
     * @param \Idealogic\RegistrationAPI\Model\PersonNameDTO|null $buyer buyer
     *
     * @return self
     */
    public function setBuyer($buyer)
    {
        if (is_null($buyer)) {
            throw new \InvalidArgumentException('non-nullable buyer cannot be null');
        }
        $this->container['buyer'] = $buyer;

        return $this;
    }

    /**
     * Gets registration_system
     *
     * @return \Idealogic\RegistrationAPI\Model\RegistrationSystemDTO|null
     */
    public function getRegistrationSystem()
    {
        return $this->container['registration_system'];
    }

    /**
     * Sets registration_system
     *
     * @param \Idealogic\RegistrationAPI\Model\RegistrationSystemDTO|null $registration_system registration_system
     *
     * @return self
     */
    public function setRegistrationSystem($registration_system)
    {
        if (is_null($registration_system)) {
            throw new \InvalidArgumentException('non-nullable registration_system cannot be null');
        }
        $this->container['registration_system'] = $registration_system;

        return $this;
    }

    /**
     * Gets payment_processor
     *
     * @return \Idealogic\RegistrationAPI\Model\PaymentProcessorDTO|null
     */
    public function getPaymentProcessor()
    {
        return $this->container['payment_processor'];
    }

    /**
     * Sets payment_processor
     *
     * @param \Idealogic\RegistrationAPI\Model\PaymentProcessorDTO|null $payment_processor payment_processor
     *
     * @return self
     */
    public function setPaymentProcessor($payment_processor)
    {
        if (is_null($payment_processor)) {
            throw new \InvalidArgumentException('non-nullable payment_processor cannot be null');
        }
        $this->container['payment_processor'] = $payment_processor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


