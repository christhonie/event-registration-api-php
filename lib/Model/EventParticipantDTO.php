<?php
/**
 * EventParticipantDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Idealogic\RegistrationAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Idealogic Event and Member Admin Service API
 *
 * Adminstrative services for managing events and members
 *
 * The version of the OpenAPI document: 2.0.6-SNAPSHOT
 * Contact: development@idealogic.co.za
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Idealogic\RegistrationAPI\Model;

use \ArrayAccess;
use \Idealogic\RegistrationAPI\ObjectSerializer;

/**
 * EventParticipantDTO Class Doc Comment
 *
 * @category Class
 * @description Represents a Person participating in an event.
 * @package  Idealogic\RegistrationAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EventParticipantDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EventParticipantDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'email' => 'string',
        'identity_number' => 'string',
        'identity_type' => 'string',
        'identity_country' => 'string',
        'date_of_birth' => '\DateTime',
        'gender' => 'string',
        'age' => 'int',
        'paid' => 'bool',
        'confirm_email' => 'bool',
        'active' => 'bool',
        'override_indicator' => 'bool',
        'team_indicator' => 'bool',
        'event' => '\Idealogic\RegistrationAPI\Model\EventDTO',
        'person' => '\Idealogic\RegistrationAPI\Model\PersonDTO',
        'category' => '\Idealogic\RegistrationAPI\Model\EventCategoryDTO',
        'team' => '\Idealogic\RegistrationAPI\Model\EventParticipantDTO',
        'number' => '\Idealogic\RegistrationAPI\Model\RaceNumberDTO',
        'tag' => '\Idealogic\RegistrationAPI\Model\TagDTO',
        'order' => '\Idealogic\RegistrationAPI\Model\OrderDTO',
        'custom1' => '\Idealogic\RegistrationAPI\Model\CustomListValueDTO',
        'custom2' => '\Idealogic\RegistrationAPI\Model\CustomListValueDTO',
        'custom3' => '\Idealogic\RegistrationAPI\Model\CustomListValueDTO',
        'teams' => '\Idealogic\RegistrationAPI\Model\EventParticipantDTO[]',
        'event_race_types' => '\Idealogic\RegistrationAPI\Model\EventRaceTypeDTO[]',
        'product' => '\Idealogic\RegistrationAPI\Model\ProductDTO'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'first_name' => null,
        'last_name' => null,
        'email' => null,
        'identity_number' => null,
        'identity_type' => null,
        'identity_country' => null,
        'date_of_birth' => 'date',
        'gender' => null,
        'age' => 'int32',
        'paid' => null,
        'confirm_email' => null,
        'active' => null,
        'override_indicator' => null,
        'team_indicator' => null,
        'event' => null,
        'person' => null,
        'category' => null,
        'team' => null,
        'number' => null,
        'tag' => null,
        'order' => null,
        'custom1' => null,
        'custom2' => null,
        'custom3' => null,
        'teams' => null,
        'event_race_types' => null,
        'product' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'first_name' => false,
        'last_name' => false,
        'email' => false,
        'identity_number' => false,
        'identity_type' => false,
        'identity_country' => false,
        'date_of_birth' => false,
        'gender' => false,
        'age' => false,
        'paid' => false,
        'confirm_email' => false,
        'active' => false,
        'override_indicator' => false,
        'team_indicator' => false,
        'event' => false,
        'person' => false,
        'category' => false,
        'team' => false,
        'number' => false,
        'tag' => false,
        'order' => false,
        'custom1' => false,
        'custom2' => false,
        'custom3' => false,
        'teams' => false,
        'event_race_types' => false,
        'product' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'email' => 'email',
        'identity_number' => 'identityNumber',
        'identity_type' => 'identityType',
        'identity_country' => 'identityCountry',
        'date_of_birth' => 'dateOfBirth',
        'gender' => 'gender',
        'age' => 'age',
        'paid' => 'paid',
        'confirm_email' => 'confirmEmail',
        'active' => 'active',
        'override_indicator' => 'overrideIndicator',
        'team_indicator' => 'teamIndicator',
        'event' => 'event',
        'person' => 'person',
        'category' => 'category',
        'team' => 'team',
        'number' => 'number',
        'tag' => 'tag',
        'order' => 'order',
        'custom1' => 'custom1',
        'custom2' => 'custom2',
        'custom3' => 'custom3',
        'teams' => 'teams',
        'event_race_types' => 'eventRaceTypes',
        'product' => 'product'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'email' => 'setEmail',
        'identity_number' => 'setIdentityNumber',
        'identity_type' => 'setIdentityType',
        'identity_country' => 'setIdentityCountry',
        'date_of_birth' => 'setDateOfBirth',
        'gender' => 'setGender',
        'age' => 'setAge',
        'paid' => 'setPaid',
        'confirm_email' => 'setConfirmEmail',
        'active' => 'setActive',
        'override_indicator' => 'setOverrideIndicator',
        'team_indicator' => 'setTeamIndicator',
        'event' => 'setEvent',
        'person' => 'setPerson',
        'category' => 'setCategory',
        'team' => 'setTeam',
        'number' => 'setNumber',
        'tag' => 'setTag',
        'order' => 'setOrder',
        'custom1' => 'setCustom1',
        'custom2' => 'setCustom2',
        'custom3' => 'setCustom3',
        'teams' => 'setTeams',
        'event_race_types' => 'setEventRaceTypes',
        'product' => 'setProduct'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'email' => 'getEmail',
        'identity_number' => 'getIdentityNumber',
        'identity_type' => 'getIdentityType',
        'identity_country' => 'getIdentityCountry',
        'date_of_birth' => 'getDateOfBirth',
        'gender' => 'getGender',
        'age' => 'getAge',
        'paid' => 'getPaid',
        'confirm_email' => 'getConfirmEmail',
        'active' => 'getActive',
        'override_indicator' => 'getOverrideIndicator',
        'team_indicator' => 'getTeamIndicator',
        'event' => 'getEvent',
        'person' => 'getPerson',
        'category' => 'getCategory',
        'team' => 'getTeam',
        'number' => 'getNumber',
        'tag' => 'getTag',
        'order' => 'getOrder',
        'custom1' => 'getCustom1',
        'custom2' => 'getCustom2',
        'custom3' => 'getCustom3',
        'teams' => 'getTeams',
        'event_race_types' => 'getEventRaceTypes',
        'product' => 'getProduct'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const IDENTITY_TYPE_NATIONAL = 'NATIONAL';
    public const IDENTITY_TYPE_PASSPORT = 'PASSPORT';
    public const IDENTITY_TYPE_OTHER = 'OTHER';
    public const GENDER_UNKNOWN = 'UNKNOWN';
    public const GENDER_MALE = 'MALE';
    public const GENDER_FEMALE = 'FEMALE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIdentityTypeAllowableValues()
    {
        return [
            self::IDENTITY_TYPE_NATIONAL,
            self::IDENTITY_TYPE_PASSPORT,
            self::IDENTITY_TYPE_OTHER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_UNKNOWN,
            self::GENDER_MALE,
            self::GENDER_FEMALE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('identity_number', $data ?? [], null);
        $this->setIfExists('identity_type', $data ?? [], null);
        $this->setIfExists('identity_country', $data ?? [], null);
        $this->setIfExists('date_of_birth', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('age', $data ?? [], null);
        $this->setIfExists('paid', $data ?? [], null);
        $this->setIfExists('confirm_email', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('override_indicator', $data ?? [], null);
        $this->setIfExists('team_indicator', $data ?? [], null);
        $this->setIfExists('event', $data ?? [], null);
        $this->setIfExists('person', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('team', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('tag', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('custom1', $data ?? [], null);
        $this->setIfExists('custom2', $data ?? [], null);
        $this->setIfExists('custom3', $data ?? [], null);
        $this->setIfExists('teams', $data ?? [], null);
        $this->setIfExists('event_race_types', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ((mb_strlen($this->container['last_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['last_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 200)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) < 0)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['identity_number']) && (mb_strlen($this->container['identity_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'identity_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['identity_number']) && (mb_strlen($this->container['identity_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'identity_number', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getIdentityTypeAllowableValues();
        if (!is_null($this->container['identity_type']) && !in_array($this->container['identity_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'identity_type', must be one of '%s'",
                $this->container['identity_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['identity_country']) && (mb_strlen($this->container['identity_country']) > 2)) {
            $invalidProperties[] = "invalid value for 'identity_country', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['identity_country']) && (mb_strlen($this->container['identity_country']) < 0)) {
            $invalidProperties[] = "invalid value for 'identity_country', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['gender'] === null) {
            $invalidProperties[] = "'gender' can't be null";
        }
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gender', must be one of '%s'",
                $this->container['gender'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        if ((mb_strlen($first_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling EventParticipantDTO., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($first_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling EventParticipantDTO., must be bigger than or equal to 0.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        if ((mb_strlen($last_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling EventParticipantDTO., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($last_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling EventParticipantDTO., must be bigger than or equal to 0.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        if ((mb_strlen($email) > 200)) {
            throw new \InvalidArgumentException('invalid length for $email when calling EventParticipantDTO., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($email) < 0)) {
            throw new \InvalidArgumentException('invalid length for $email when calling EventParticipantDTO., must be bigger than or equal to 0.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets identity_number
     *
     * @return string|null
     */
    public function getIdentityNumber()
    {
        return $this->container['identity_number'];
    }

    /**
     * Sets identity_number
     *
     * @param string|null $identity_number identity_number
     *
     * @return self
     */
    public function setIdentityNumber($identity_number)
    {
        if (is_null($identity_number)) {
            throw new \InvalidArgumentException('non-nullable identity_number cannot be null');
        }
        if ((mb_strlen($identity_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $identity_number when calling EventParticipantDTO., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($identity_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $identity_number when calling EventParticipantDTO., must be bigger than or equal to 0.');
        }

        $this->container['identity_number'] = $identity_number;

        return $this;
    }

    /**
     * Gets identity_type
     *
     * @return string|null
     */
    public function getIdentityType()
    {
        return $this->container['identity_type'];
    }

    /**
     * Sets identity_type
     *
     * @param string|null $identity_type identity_type
     *
     * @return self
     */
    public function setIdentityType($identity_type)
    {
        if (is_null($identity_type)) {
            throw new \InvalidArgumentException('non-nullable identity_type cannot be null');
        }
        $allowedValues = $this->getIdentityTypeAllowableValues();
        if (!in_array($identity_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'identity_type', must be one of '%s'",
                    $identity_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['identity_type'] = $identity_type;

        return $this;
    }

    /**
     * Gets identity_country
     *
     * @return string|null
     */
    public function getIdentityCountry()
    {
        return $this->container['identity_country'];
    }

    /**
     * Sets identity_country
     *
     * @param string|null $identity_country identity_country
     *
     * @return self
     */
    public function setIdentityCountry($identity_country)
    {
        if (is_null($identity_country)) {
            throw new \InvalidArgumentException('non-nullable identity_country cannot be null');
        }
        if ((mb_strlen($identity_country) > 2)) {
            throw new \InvalidArgumentException('invalid length for $identity_country when calling EventParticipantDTO., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($identity_country) < 0)) {
            throw new \InvalidArgumentException('invalid length for $identity_country when calling EventParticipantDTO., must be bigger than or equal to 0.');
        }

        $this->container['identity_country'] = $identity_country;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \DateTime|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime|null $date_of_birth date_of_birth
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {
        if (is_null($date_of_birth)) {
            throw new \InvalidArgumentException('non-nullable date_of_birth cannot be null');
        }
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $allowedValues = $this->getGenderAllowableValues();
        if (!in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gender', must be one of '%s'",
                    $gender,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets age
     *
     * @return int|null
     */
    public function getAge()
    {
        return $this->container['age'];
    }

    /**
     * Sets age
     *
     * @param int|null $age Age on the first day of the event.
     *
     * @return self
     */
    public function setAge($age)
    {
        if (is_null($age)) {
            throw new \InvalidArgumentException('non-nullable age cannot be null');
        }
        $this->container['age'] = $age;

        return $this;
    }

    /**
     * Gets paid
     *
     * @return bool|null
     */
    public function getPaid()
    {
        return $this->container['paid'];
    }

    /**
     * Sets paid
     *
     * @param bool|null $paid paid
     *
     * @return self
     */
    public function setPaid($paid)
    {
        if (is_null($paid)) {
            throw new \InvalidArgumentException('non-nullable paid cannot be null');
        }
        $this->container['paid'] = $paid;

        return $this;
    }

    /**
     * Gets confirm_email
     *
     * @return bool|null
     */
    public function getConfirmEmail()
    {
        return $this->container['confirm_email'];
    }

    /**
     * Sets confirm_email
     *
     * @param bool|null $confirm_email confirm_email
     *
     * @return self
     */
    public function setConfirmEmail($confirm_email)
    {
        if (is_null($confirm_email)) {
            throw new \InvalidArgumentException('non-nullable confirm_email cannot be null');
        }
        $this->container['confirm_email'] = $confirm_email;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets override_indicator
     *
     * @return bool|null
     */
    public function getOverrideIndicator()
    {
        return $this->container['override_indicator'];
    }

    /**
     * Sets override_indicator
     *
     * @param bool|null $override_indicator override_indicator
     *
     * @return self
     */
    public function setOverrideIndicator($override_indicator)
    {
        if (is_null($override_indicator)) {
            throw new \InvalidArgumentException('non-nullable override_indicator cannot be null');
        }
        $this->container['override_indicator'] = $override_indicator;

        return $this;
    }

    /**
     * Gets team_indicator
     *
     * @return bool|null
     */
    public function getTeamIndicator()
    {
        return $this->container['team_indicator'];
    }

    /**
     * Sets team_indicator
     *
     * @param bool|null $team_indicator team_indicator
     *
     * @return self
     */
    public function setTeamIndicator($team_indicator)
    {
        if (is_null($team_indicator)) {
            throw new \InvalidArgumentException('non-nullable team_indicator cannot be null');
        }
        $this->container['team_indicator'] = $team_indicator;

        return $this;
    }

    /**
     * Gets event
     *
     * @return \Idealogic\RegistrationAPI\Model\EventDTO|null
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param \Idealogic\RegistrationAPI\Model\EventDTO|null $event event
     *
     * @return self
     */
    public function setEvent($event)
    {
        if (is_null($event)) {
            throw new \InvalidArgumentException('non-nullable event cannot be null');
        }
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets person
     *
     * @return \Idealogic\RegistrationAPI\Model\PersonDTO|null
     */
    public function getPerson()
    {
        return $this->container['person'];
    }

    /**
     * Sets person
     *
     * @param \Idealogic\RegistrationAPI\Model\PersonDTO|null $person person
     *
     * @return self
     */
    public function setPerson($person)
    {
        if (is_null($person)) {
            throw new \InvalidArgumentException('non-nullable person cannot be null');
        }
        $this->container['person'] = $person;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \Idealogic\RegistrationAPI\Model\EventCategoryDTO|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \Idealogic\RegistrationAPI\Model\EventCategoryDTO|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets team
     *
     * @return \Idealogic\RegistrationAPI\Model\EventParticipantDTO|null
     */
    public function getTeam()
    {
        return $this->container['team'];
    }

    /**
     * Sets team
     *
     * @param \Idealogic\RegistrationAPI\Model\EventParticipantDTO|null $team team
     *
     * @return self
     */
    public function setTeam($team)
    {
        if (is_null($team)) {
            throw new \InvalidArgumentException('non-nullable team cannot be null');
        }
        $this->container['team'] = $team;

        return $this;
    }

    /**
     * Gets number
     *
     * @return \Idealogic\RegistrationAPI\Model\RaceNumberDTO|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param \Idealogic\RegistrationAPI\Model\RaceNumberDTO|null $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return \Idealogic\RegistrationAPI\Model\TagDTO|null
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param \Idealogic\RegistrationAPI\Model\TagDTO|null $tag tag
     *
     * @return self
     */
    public function setTag($tag)
    {
        if (is_null($tag)) {
            throw new \InvalidArgumentException('non-nullable tag cannot be null');
        }
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \Idealogic\RegistrationAPI\Model\OrderDTO|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \Idealogic\RegistrationAPI\Model\OrderDTO|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets custom1
     *
     * @return \Idealogic\RegistrationAPI\Model\CustomListValueDTO|null
     */
    public function getCustom1()
    {
        return $this->container['custom1'];
    }

    /**
     * Sets custom1
     *
     * @param \Idealogic\RegistrationAPI\Model\CustomListValueDTO|null $custom1 custom1
     *
     * @return self
     */
    public function setCustom1($custom1)
    {
        if (is_null($custom1)) {
            throw new \InvalidArgumentException('non-nullable custom1 cannot be null');
        }
        $this->container['custom1'] = $custom1;

        return $this;
    }

    /**
     * Gets custom2
     *
     * @return \Idealogic\RegistrationAPI\Model\CustomListValueDTO|null
     */
    public function getCustom2()
    {
        return $this->container['custom2'];
    }

    /**
     * Sets custom2
     *
     * @param \Idealogic\RegistrationAPI\Model\CustomListValueDTO|null $custom2 custom2
     *
     * @return self
     */
    public function setCustom2($custom2)
    {
        if (is_null($custom2)) {
            throw new \InvalidArgumentException('non-nullable custom2 cannot be null');
        }
        $this->container['custom2'] = $custom2;

        return $this;
    }

    /**
     * Gets custom3
     *
     * @return \Idealogic\RegistrationAPI\Model\CustomListValueDTO|null
     */
    public function getCustom3()
    {
        return $this->container['custom3'];
    }

    /**
     * Sets custom3
     *
     * @param \Idealogic\RegistrationAPI\Model\CustomListValueDTO|null $custom3 custom3
     *
     * @return self
     */
    public function setCustom3($custom3)
    {
        if (is_null($custom3)) {
            throw new \InvalidArgumentException('non-nullable custom3 cannot be null');
        }
        $this->container['custom3'] = $custom3;

        return $this;
    }

    /**
     * Gets teams
     *
     * @return \Idealogic\RegistrationAPI\Model\EventParticipantDTO[]|null
     */
    public function getTeams()
    {
        return $this->container['teams'];
    }

    /**
     * Sets teams
     *
     * @param \Idealogic\RegistrationAPI\Model\EventParticipantDTO[]|null $teams teams
     *
     * @return self
     */
    public function setTeams($teams)
    {
        if (is_null($teams)) {
            throw new \InvalidArgumentException('non-nullable teams cannot be null');
        }


        $this->container['teams'] = $teams;

        return $this;
    }

    /**
     * Gets event_race_types
     *
     * @return \Idealogic\RegistrationAPI\Model\EventRaceTypeDTO[]|null
     */
    public function getEventRaceTypes()
    {
        return $this->container['event_race_types'];
    }

    /**
     * Sets event_race_types
     *
     * @param \Idealogic\RegistrationAPI\Model\EventRaceTypeDTO[]|null $event_race_types event_race_types
     *
     * @return self
     */
    public function setEventRaceTypes($event_race_types)
    {
        if (is_null($event_race_types)) {
            throw new \InvalidArgumentException('non-nullable event_race_types cannot be null');
        }


        $this->container['event_race_types'] = $event_race_types;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \Idealogic\RegistrationAPI\Model\ProductDTO|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \Idealogic\RegistrationAPI\Model\ProductDTO|null $product product
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }
        $this->container['product'] = $product;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


