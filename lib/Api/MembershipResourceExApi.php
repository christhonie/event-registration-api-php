<?php
/**
 * MembershipResourceExApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Idealogic\RegistrationAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Idealogic Event and Member Admin Service API
 *
 * Adminstrative services for managing events and members
 *
 * The version of the OpenAPI document: 2.2.0-SNAPSHOT
 * Contact: development@idealogic.co.za
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Idealogic\RegistrationAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Idealogic\RegistrationAPI\ApiException;
use Idealogic\RegistrationAPI\Configuration;
use Idealogic\RegistrationAPI\HeaderSelector;
use Idealogic\RegistrationAPI\ObjectSerializer;

/**
 * MembershipResourceExApi Class Doc Comment
 *
 * @category Class
 * @package  Idealogic\RegistrationAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MembershipResourceExApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addMembership' => [
            'application/json',
        ],
        'enrolMemberships' => [
            'application/json',
        ],
        'getLinkedMembers' => [
            'application/json',
        ],
        'getMemberStatusByLatestPeriodForMembershipType' => [
            'application/json',
        ],
        'getMembershipAttachment' => [
            'application/json',
        ],
        'importMembership' => [
            'application/json',
        ],
        'updateMembershipOrder' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addMembership
     *
     * @param  \Idealogic\RegistrationAPI\Model\MembershipAddRequestDTO $membership_add_request_dto membership_add_request_dto (required)
     * @param  int $organisation_id organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMembership'] to see the possible values for this operation
     *
     * @throws \Idealogic\RegistrationAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Idealogic\RegistrationAPI\Model\MembershipAddResponseDTO
     */
    public function addMembership($membership_add_request_dto, $organisation_id = null, string $contentType = self::contentTypes['addMembership'][0])
    {
        list($response) = $this->addMembershipWithHttpInfo($membership_add_request_dto, $organisation_id, $contentType);
        return $response;
    }

    /**
     * Operation addMembershipWithHttpInfo
     *
     * @param  \Idealogic\RegistrationAPI\Model\MembershipAddRequestDTO $membership_add_request_dto (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMembership'] to see the possible values for this operation
     *
     * @throws \Idealogic\RegistrationAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\RegistrationAPI\Model\MembershipAddResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function addMembershipWithHttpInfo($membership_add_request_dto, $organisation_id = null, string $contentType = self::contentTypes['addMembership'][0])
    {
        $request = $this->addMembershipRequest($membership_add_request_dto, $organisation_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Idealogic\RegistrationAPI\Model\MembershipAddResponseDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Idealogic\RegistrationAPI\Model\MembershipAddResponseDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Idealogic\RegistrationAPI\Model\MembershipAddResponseDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Idealogic\RegistrationAPI\Model\MembershipAddResponseDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\RegistrationAPI\Model\MembershipAddResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addMembershipAsync
     *
     * @param  \Idealogic\RegistrationAPI\Model\MembershipAddRequestDTO $membership_add_request_dto (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addMembershipAsync($membership_add_request_dto, $organisation_id = null, string $contentType = self::contentTypes['addMembership'][0])
    {
        return $this->addMembershipAsyncWithHttpInfo($membership_add_request_dto, $organisation_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addMembershipAsyncWithHttpInfo
     *
     * @param  \Idealogic\RegistrationAPI\Model\MembershipAddRequestDTO $membership_add_request_dto (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addMembershipAsyncWithHttpInfo($membership_add_request_dto, $organisation_id = null, string $contentType = self::contentTypes['addMembership'][0])
    {
        $returnType = '\Idealogic\RegistrationAPI\Model\MembershipAddResponseDTO';
        $request = $this->addMembershipRequest($membership_add_request_dto, $organisation_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addMembership'
     *
     * @param  \Idealogic\RegistrationAPI\Model\MembershipAddRequestDTO $membership_add_request_dto (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addMembershipRequest($membership_add_request_dto, $organisation_id = null, string $contentType = self::contentTypes['addMembership'][0])
    {

        // verify the required parameter 'membership_add_request_dto' is set
        if ($membership_add_request_dto === null || (is_array($membership_add_request_dto) && count($membership_add_request_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $membership_add_request_dto when calling addMembership'
            );
        }



        $resourcePath = '/api/memberships/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $organisation_id,
            'organisationId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($membership_add_request_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($membership_add_request_dto));
            } else {
                $httpBody = $membership_add_request_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation enrolMemberships
     *
     * @param  \Idealogic\RegistrationAPI\Model\MembershipEnrolRequestDTO $membership_enrol_request_dto membership_enrol_request_dto (required)
     * @param  int $organisation_id organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enrolMemberships'] to see the possible values for this operation
     *
     * @throws \Idealogic\RegistrationAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Idealogic\RegistrationAPI\Model\MembershipStatusDTO[]
     */
    public function enrolMemberships($membership_enrol_request_dto, $organisation_id = null, string $contentType = self::contentTypes['enrolMemberships'][0])
    {
        list($response) = $this->enrolMembershipsWithHttpInfo($membership_enrol_request_dto, $organisation_id, $contentType);
        return $response;
    }

    /**
     * Operation enrolMembershipsWithHttpInfo
     *
     * @param  \Idealogic\RegistrationAPI\Model\MembershipEnrolRequestDTO $membership_enrol_request_dto (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enrolMemberships'] to see the possible values for this operation
     *
     * @throws \Idealogic\RegistrationAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\RegistrationAPI\Model\MembershipStatusDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function enrolMembershipsWithHttpInfo($membership_enrol_request_dto, $organisation_id = null, string $contentType = self::contentTypes['enrolMemberships'][0])
    {
        $request = $this->enrolMembershipsRequest($membership_enrol_request_dto, $organisation_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Idealogic\RegistrationAPI\Model\MembershipStatusDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Idealogic\RegistrationAPI\Model\MembershipStatusDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Idealogic\RegistrationAPI\Model\MembershipStatusDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Idealogic\RegistrationAPI\Model\MembershipStatusDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\RegistrationAPI\Model\MembershipStatusDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation enrolMembershipsAsync
     *
     * @param  \Idealogic\RegistrationAPI\Model\MembershipEnrolRequestDTO $membership_enrol_request_dto (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enrolMemberships'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enrolMembershipsAsync($membership_enrol_request_dto, $organisation_id = null, string $contentType = self::contentTypes['enrolMemberships'][0])
    {
        return $this->enrolMembershipsAsyncWithHttpInfo($membership_enrol_request_dto, $organisation_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation enrolMembershipsAsyncWithHttpInfo
     *
     * @param  \Idealogic\RegistrationAPI\Model\MembershipEnrolRequestDTO $membership_enrol_request_dto (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enrolMemberships'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enrolMembershipsAsyncWithHttpInfo($membership_enrol_request_dto, $organisation_id = null, string $contentType = self::contentTypes['enrolMemberships'][0])
    {
        $returnType = '\Idealogic\RegistrationAPI\Model\MembershipStatusDTO[]';
        $request = $this->enrolMembershipsRequest($membership_enrol_request_dto, $organisation_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'enrolMemberships'
     *
     * @param  \Idealogic\RegistrationAPI\Model\MembershipEnrolRequestDTO $membership_enrol_request_dto (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enrolMemberships'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function enrolMembershipsRequest($membership_enrol_request_dto, $organisation_id = null, string $contentType = self::contentTypes['enrolMemberships'][0])
    {

        // verify the required parameter 'membership_enrol_request_dto' is set
        if ($membership_enrol_request_dto === null || (is_array($membership_enrol_request_dto) && count($membership_enrol_request_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $membership_enrol_request_dto when calling enrolMemberships'
            );
        }



        $resourcePath = '/api/memberships/enrol';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $organisation_id,
            'organisationId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($membership_enrol_request_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($membership_enrol_request_dto));
            } else {
                $httpBody = $membership_enrol_request_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLinkedMembers
     *
     * @param  string $external_user_id external_user_id (required)
     * @param  int $organisation_id organisation_id (optional)
     * @param  int $membership_type_id membership_type_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLinkedMembers'] to see the possible values for this operation
     *
     * @throws \Idealogic\RegistrationAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Idealogic\RegistrationAPI\Model\MembershipStatusDTO[]
     */
    public function getLinkedMembers($external_user_id, $organisation_id = null, $membership_type_id = null, string $contentType = self::contentTypes['getLinkedMembers'][0])
    {
        list($response) = $this->getLinkedMembersWithHttpInfo($external_user_id, $organisation_id, $membership_type_id, $contentType);
        return $response;
    }

    /**
     * Operation getLinkedMembersWithHttpInfo
     *
     * @param  string $external_user_id (required)
     * @param  int $organisation_id (optional)
     * @param  int $membership_type_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLinkedMembers'] to see the possible values for this operation
     *
     * @throws \Idealogic\RegistrationAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\RegistrationAPI\Model\MembershipStatusDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getLinkedMembersWithHttpInfo($external_user_id, $organisation_id = null, $membership_type_id = null, string $contentType = self::contentTypes['getLinkedMembers'][0])
    {
        $request = $this->getLinkedMembersRequest($external_user_id, $organisation_id, $membership_type_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Idealogic\RegistrationAPI\Model\MembershipStatusDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Idealogic\RegistrationAPI\Model\MembershipStatusDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Idealogic\RegistrationAPI\Model\MembershipStatusDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Idealogic\RegistrationAPI\Model\MembershipStatusDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\RegistrationAPI\Model\MembershipStatusDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLinkedMembersAsync
     *
     * @param  string $external_user_id (required)
     * @param  int $organisation_id (optional)
     * @param  int $membership_type_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLinkedMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLinkedMembersAsync($external_user_id, $organisation_id = null, $membership_type_id = null, string $contentType = self::contentTypes['getLinkedMembers'][0])
    {
        return $this->getLinkedMembersAsyncWithHttpInfo($external_user_id, $organisation_id, $membership_type_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLinkedMembersAsyncWithHttpInfo
     *
     * @param  string $external_user_id (required)
     * @param  int $organisation_id (optional)
     * @param  int $membership_type_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLinkedMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLinkedMembersAsyncWithHttpInfo($external_user_id, $organisation_id = null, $membership_type_id = null, string $contentType = self::contentTypes['getLinkedMembers'][0])
    {
        $returnType = '\Idealogic\RegistrationAPI\Model\MembershipStatusDTO[]';
        $request = $this->getLinkedMembersRequest($external_user_id, $organisation_id, $membership_type_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLinkedMembers'
     *
     * @param  string $external_user_id (required)
     * @param  int $organisation_id (optional)
     * @param  int $membership_type_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLinkedMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLinkedMembersRequest($external_user_id, $organisation_id = null, $membership_type_id = null, string $contentType = self::contentTypes['getLinkedMembers'][0])
    {

        // verify the required parameter 'external_user_id' is set
        if ($external_user_id === null || (is_array($external_user_id) && count($external_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_user_id when calling getLinkedMembers'
            );
        }




        $resourcePath = '/api/memberships/linkedStatus/{externalUserId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $organisation_id,
            'organisationId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_type_id,
            'membershipTypeId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($external_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalUserId' . '}',
                ObjectSerializer::toPathValue($external_user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMemberStatusByLatestPeriodForMembershipType
     *
     * @param  string $external_user_id external_user_id (required)
     * @param  int $membership_type_id membership_type_id (required)
     * @param  int $organisation_id organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMemberStatusByLatestPeriodForMembershipType'] to see the possible values for this operation
     *
     * @throws \Idealogic\RegistrationAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Idealogic\RegistrationAPI\Model\LatestPeriodMembershipStatusResponseDTO
     */
    public function getMemberStatusByLatestPeriodForMembershipType($external_user_id, $membership_type_id, $organisation_id = null, string $contentType = self::contentTypes['getMemberStatusByLatestPeriodForMembershipType'][0])
    {
        list($response) = $this->getMemberStatusByLatestPeriodForMembershipTypeWithHttpInfo($external_user_id, $membership_type_id, $organisation_id, $contentType);
        return $response;
    }

    /**
     * Operation getMemberStatusByLatestPeriodForMembershipTypeWithHttpInfo
     *
     * @param  string $external_user_id (required)
     * @param  int $membership_type_id (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMemberStatusByLatestPeriodForMembershipType'] to see the possible values for this operation
     *
     * @throws \Idealogic\RegistrationAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\RegistrationAPI\Model\LatestPeriodMembershipStatusResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMemberStatusByLatestPeriodForMembershipTypeWithHttpInfo($external_user_id, $membership_type_id, $organisation_id = null, string $contentType = self::contentTypes['getMemberStatusByLatestPeriodForMembershipType'][0])
    {
        $request = $this->getMemberStatusByLatestPeriodForMembershipTypeRequest($external_user_id, $membership_type_id, $organisation_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Idealogic\RegistrationAPI\Model\LatestPeriodMembershipStatusResponseDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Idealogic\RegistrationAPI\Model\LatestPeriodMembershipStatusResponseDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Idealogic\RegistrationAPI\Model\LatestPeriodMembershipStatusResponseDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Idealogic\RegistrationAPI\Model\LatestPeriodMembershipStatusResponseDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\RegistrationAPI\Model\LatestPeriodMembershipStatusResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMemberStatusByLatestPeriodForMembershipTypeAsync
     *
     * @param  string $external_user_id (required)
     * @param  int $membership_type_id (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMemberStatusByLatestPeriodForMembershipType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMemberStatusByLatestPeriodForMembershipTypeAsync($external_user_id, $membership_type_id, $organisation_id = null, string $contentType = self::contentTypes['getMemberStatusByLatestPeriodForMembershipType'][0])
    {
        return $this->getMemberStatusByLatestPeriodForMembershipTypeAsyncWithHttpInfo($external_user_id, $membership_type_id, $organisation_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMemberStatusByLatestPeriodForMembershipTypeAsyncWithHttpInfo
     *
     * @param  string $external_user_id (required)
     * @param  int $membership_type_id (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMemberStatusByLatestPeriodForMembershipType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMemberStatusByLatestPeriodForMembershipTypeAsyncWithHttpInfo($external_user_id, $membership_type_id, $organisation_id = null, string $contentType = self::contentTypes['getMemberStatusByLatestPeriodForMembershipType'][0])
    {
        $returnType = '\Idealogic\RegistrationAPI\Model\LatestPeriodMembershipStatusResponseDTO';
        $request = $this->getMemberStatusByLatestPeriodForMembershipTypeRequest($external_user_id, $membership_type_id, $organisation_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMemberStatusByLatestPeriodForMembershipType'
     *
     * @param  string $external_user_id (required)
     * @param  int $membership_type_id (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMemberStatusByLatestPeriodForMembershipType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMemberStatusByLatestPeriodForMembershipTypeRequest($external_user_id, $membership_type_id, $organisation_id = null, string $contentType = self::contentTypes['getMemberStatusByLatestPeriodForMembershipType'][0])
    {

        // verify the required parameter 'external_user_id' is set
        if ($external_user_id === null || (is_array($external_user_id) && count($external_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_user_id when calling getMemberStatusByLatestPeriodForMembershipType'
            );
        }

        // verify the required parameter 'membership_type_id' is set
        if ($membership_type_id === null || (is_array($membership_type_id) && count($membership_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $membership_type_id when calling getMemberStatusByLatestPeriodForMembershipType'
            );
        }



        $resourcePath = '/api/memberships/status/latestPeriod';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $organisation_id,
            'organisationId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $external_user_id,
            'externalUserId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_type_id,
            'membershipTypeId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMembershipAttachment
     *
     * @param  string $uuid uuid (required)
     * @param  int $organisation_id organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMembershipAttachment'] to see the possible values for this operation
     *
     * @throws \Idealogic\RegistrationAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getMembershipAttachment($uuid, $organisation_id = null, string $contentType = self::contentTypes['getMembershipAttachment'][0])
    {
        list($response) = $this->getMembershipAttachmentWithHttpInfo($uuid, $organisation_id, $contentType);
        return $response;
    }

    /**
     * Operation getMembershipAttachmentWithHttpInfo
     *
     * @param  string $uuid (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMembershipAttachment'] to see the possible values for this operation
     *
     * @throws \Idealogic\RegistrationAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMembershipAttachmentWithHttpInfo($uuid, $organisation_id = null, string $contentType = self::contentTypes['getMembershipAttachment'][0])
    {
        $request = $this->getMembershipAttachmentRequest($uuid, $organisation_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMembershipAttachmentAsync
     *
     * @param  string $uuid (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMembershipAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMembershipAttachmentAsync($uuid, $organisation_id = null, string $contentType = self::contentTypes['getMembershipAttachment'][0])
    {
        return $this->getMembershipAttachmentAsyncWithHttpInfo($uuid, $organisation_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMembershipAttachmentAsyncWithHttpInfo
     *
     * @param  string $uuid (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMembershipAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMembershipAttachmentAsyncWithHttpInfo($uuid, $organisation_id = null, string $contentType = self::contentTypes['getMembershipAttachment'][0])
    {
        $returnType = 'string[]';
        $request = $this->getMembershipAttachmentRequest($uuid, $organisation_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMembershipAttachment'
     *
     * @param  string $uuid (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMembershipAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMembershipAttachmentRequest($uuid, $organisation_id = null, string $contentType = self::contentTypes['getMembershipAttachment'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getMembershipAttachment'
            );
        }



        $resourcePath = '/api/memberships/attachment/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $organisation_id,
            'organisationId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation importMembership
     *
     * @param  string $file file (required)
     * @param  int $sheet_index sheet_index (required)
     * @param  int $period_id period_id (required)
     * @param  int $org_id org_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importMembership'] to see the possible values for this operation
     *
     * @throws \Idealogic\RegistrationAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Idealogic\RegistrationAPI\Model\MembershipAddResponseDTO[]
     */
    public function importMembership($file, $sheet_index, $period_id, $org_id = null, string $contentType = self::contentTypes['importMembership'][0])
    {
        list($response) = $this->importMembershipWithHttpInfo($file, $sheet_index, $period_id, $org_id, $contentType);
        return $response;
    }

    /**
     * Operation importMembershipWithHttpInfo
     *
     * @param  string $file (required)
     * @param  int $sheet_index (required)
     * @param  int $period_id (required)
     * @param  int $org_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importMembership'] to see the possible values for this operation
     *
     * @throws \Idealogic\RegistrationAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\RegistrationAPI\Model\MembershipAddResponseDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function importMembershipWithHttpInfo($file, $sheet_index, $period_id, $org_id = null, string $contentType = self::contentTypes['importMembership'][0])
    {
        $request = $this->importMembershipRequest($file, $sheet_index, $period_id, $org_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Idealogic\RegistrationAPI\Model\MembershipAddResponseDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Idealogic\RegistrationAPI\Model\MembershipAddResponseDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Idealogic\RegistrationAPI\Model\MembershipAddResponseDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Idealogic\RegistrationAPI\Model\MembershipAddResponseDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\RegistrationAPI\Model\MembershipAddResponseDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation importMembershipAsync
     *
     * @param  string $file (required)
     * @param  int $sheet_index (required)
     * @param  int $period_id (required)
     * @param  int $org_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function importMembershipAsync($file, $sheet_index, $period_id, $org_id = null, string $contentType = self::contentTypes['importMembership'][0])
    {
        return $this->importMembershipAsyncWithHttpInfo($file, $sheet_index, $period_id, $org_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation importMembershipAsyncWithHttpInfo
     *
     * @param  string $file (required)
     * @param  int $sheet_index (required)
     * @param  int $period_id (required)
     * @param  int $org_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function importMembershipAsyncWithHttpInfo($file, $sheet_index, $period_id, $org_id = null, string $contentType = self::contentTypes['importMembership'][0])
    {
        $returnType = '\Idealogic\RegistrationAPI\Model\MembershipAddResponseDTO[]';
        $request = $this->importMembershipRequest($file, $sheet_index, $period_id, $org_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'importMembership'
     *
     * @param  string $file (required)
     * @param  int $sheet_index (required)
     * @param  int $period_id (required)
     * @param  int $org_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function importMembershipRequest($file, $sheet_index, $period_id, $org_id = null, string $contentType = self::contentTypes['importMembership'][0])
    {

        // verify the required parameter 'file' is set
        if ($file === null || (is_array($file) && count($file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling importMembership'
            );
        }

        // verify the required parameter 'sheet_index' is set
        if ($sheet_index === null || (is_array($sheet_index) && count($sheet_index) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_index when calling importMembership'
            );
        }

        // verify the required parameter 'period_id' is set
        if ($period_id === null || (is_array($period_id) && count($period_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period_id when calling importMembership'
            );
        }



        $resourcePath = '/api/memberships/import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $file,
            'file', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sheet_index,
            'sheetIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $org_id,
            'orgId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_id,
            'periodId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateMembershipOrder
     *
     * @param  \Idealogic\RegistrationAPI\Model\MembershipOrderUpdateRequestDTO $membership_order_update_request_dto membership_order_update_request_dto (required)
     * @param  int $organisation_id organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMembershipOrder'] to see the possible values for this operation
     *
     * @throws \Idealogic\RegistrationAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Idealogic\RegistrationAPI\Model\MembershipOrderUpdateResponseDTO
     */
    public function updateMembershipOrder($membership_order_update_request_dto, $organisation_id = null, string $contentType = self::contentTypes['updateMembershipOrder'][0])
    {
        list($response) = $this->updateMembershipOrderWithHttpInfo($membership_order_update_request_dto, $organisation_id, $contentType);
        return $response;
    }

    /**
     * Operation updateMembershipOrderWithHttpInfo
     *
     * @param  \Idealogic\RegistrationAPI\Model\MembershipOrderUpdateRequestDTO $membership_order_update_request_dto (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMembershipOrder'] to see the possible values for this operation
     *
     * @throws \Idealogic\RegistrationAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\RegistrationAPI\Model\MembershipOrderUpdateResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateMembershipOrderWithHttpInfo($membership_order_update_request_dto, $organisation_id = null, string $contentType = self::contentTypes['updateMembershipOrder'][0])
    {
        $request = $this->updateMembershipOrderRequest($membership_order_update_request_dto, $organisation_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Idealogic\RegistrationAPI\Model\MembershipOrderUpdateResponseDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Idealogic\RegistrationAPI\Model\MembershipOrderUpdateResponseDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Idealogic\RegistrationAPI\Model\MembershipOrderUpdateResponseDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Idealogic\RegistrationAPI\Model\MembershipOrderUpdateResponseDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\RegistrationAPI\Model\MembershipOrderUpdateResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateMembershipOrderAsync
     *
     * @param  \Idealogic\RegistrationAPI\Model\MembershipOrderUpdateRequestDTO $membership_order_update_request_dto (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMembershipOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMembershipOrderAsync($membership_order_update_request_dto, $organisation_id = null, string $contentType = self::contentTypes['updateMembershipOrder'][0])
    {
        return $this->updateMembershipOrderAsyncWithHttpInfo($membership_order_update_request_dto, $organisation_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateMembershipOrderAsyncWithHttpInfo
     *
     * @param  \Idealogic\RegistrationAPI\Model\MembershipOrderUpdateRequestDTO $membership_order_update_request_dto (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMembershipOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMembershipOrderAsyncWithHttpInfo($membership_order_update_request_dto, $organisation_id = null, string $contentType = self::contentTypes['updateMembershipOrder'][0])
    {
        $returnType = '\Idealogic\RegistrationAPI\Model\MembershipOrderUpdateResponseDTO';
        $request = $this->updateMembershipOrderRequest($membership_order_update_request_dto, $organisation_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateMembershipOrder'
     *
     * @param  \Idealogic\RegistrationAPI\Model\MembershipOrderUpdateRequestDTO $membership_order_update_request_dto (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMembershipOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateMembershipOrderRequest($membership_order_update_request_dto, $organisation_id = null, string $contentType = self::contentTypes['updateMembershipOrder'][0])
    {

        // verify the required parameter 'membership_order_update_request_dto' is set
        if ($membership_order_update_request_dto === null || (is_array($membership_order_update_request_dto) && count($membership_order_update_request_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $membership_order_update_request_dto when calling updateMembershipOrder'
            );
        }



        $resourcePath = '/api/memberships/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $organisation_id,
            'organisationId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($membership_order_update_request_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($membership_order_update_request_dto));
            } else {
                $httpBody = $membership_order_update_request_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
